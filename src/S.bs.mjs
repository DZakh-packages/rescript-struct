// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var mapValues = ((dict, fn)=>{
      var key,newDict = {};
      for (key in dict) {
        newDict[key] = fn(dict[key])
      }
      return newDict
    });

var every = ((dict, fn)=>{
      for (var key in dict) {
        if (!fn(dict[key])) {
          return false
        }
      }
      return true
    });

function fromString(string) {
  return JSON.stringify(string);
}

function classify(value) {
  var typeOfValue = typeof value;
  if (typeOfValue === "symbol") {
    return {
            TAG: "Symbol",
            _0: value
          };
  } else if (typeOfValue === "boolean") {
    return {
            TAG: "Boolean",
            _0: value
          };
  } else if (typeOfValue === "string") {
    return {
            TAG: "String",
            _0: value
          };
  } else if (typeOfValue === "function") {
    return {
            TAG: "Function",
            _0: value
          };
  } else if (typeOfValue === "object") {
    if (value === null) {
      return "Null";
    } else if (Array.isArray(value)) {
      return {
              TAG: "Array",
              _0: value.map(function (i) {
                    return classify(i);
                  })
            };
    } else if (value.constructor === Object) {
      return {
              TAG: "Dict",
              _0: mapValues(value, classify)
            };
    } else {
      return {
              TAG: "Object",
              _0: value
            };
    }
  } else if (typeOfValue === "undefined") {
    return "Undefined";
  } else if (typeOfValue === "number") {
    if (Number.isNaN(value)) {
      return "NaN";
    } else {
      return {
              TAG: "Number",
              _0: value
            };
    }
  } else {
    return {
            TAG: "BigInt",
            _0: value
          };
  }
}

function value(literal) {
  if (typeof literal !== "object") {
    switch (literal) {
      case "Null" :
          return null;
      case "Undefined" :
          return undefined;
      case "NaN" :
          return NaN;
      
    }
  } else {
    switch (literal.TAG) {
      case "Array" :
          return literal._0.map(value);
      case "Dict" :
          return mapValues(literal._0, value);
      default:
        return literal._0;
    }
  }
}

function isJsonable(literal) {
  if (typeof literal !== "object") {
    if (literal === "Null") {
      return true;
    } else {
      return false;
    }
  }
  switch (literal.TAG) {
    case "String" :
    case "Number" :
    case "Boolean" :
        return true;
    case "Array" :
        return literal._0.every(isJsonable);
    case "Dict" :
        return every(literal._0, isJsonable);
    default:
      return false;
  }
}

function toText(literal) {
  if (typeof literal !== "object") {
    switch (literal) {
      case "Null" :
          return "null";
      case "Undefined" :
          return "undefined";
      case "NaN" :
          return "NaN";
      
    }
  } else {
    switch (literal.TAG) {
      case "String" :
          return JSON.stringify(literal._0);
      case "Number" :
      case "Boolean" :
          return literal._0;
      case "BigInt" :
          return literal._0 + "n";
      case "Symbol" :
          return literal._0.toString();
      case "Array" :
          return "[" + literal._0.map(toText).join(", ") + "]";
      case "Dict" :
          var v = literal._0;
          return "{" + Object.keys(v).map(function (key) {
                        return JSON.stringify(key) + ": " + toText(v[key]);
                      }).join(", ") + "}";
      case "Function" :
          return "[object Function]";
      case "Object" :
          return Object.prototype.toString.call(literal._0);
      
    }
  }
}

var Literal = {
  classify: classify,
  value: value,
  isJsonable: isJsonable,
  toText: toText
};

function toArray(path) {
  if (path === "") {
    return [];
  } else {
    return JSON.parse(path.split("\"][\"").join("\",\""));
  }
}

function fromLocation($$location) {
  return "[" + JSON.stringify($$location) + "]";
}

function fromArray(array) {
  var len = array.length;
  if (len !== 1) {
    if (len !== 0) {
      return "[" + array.map(fromString).join("][") + "]";
    } else {
      return "";
    }
  }
  var $$location = array[0];
  return "[" + JSON.stringify($$location) + "]";
}

function concat(path, concatedPath) {
  return path + concatedPath;
}

var symbol = Symbol("rescript-struct");

function toParseError(internalError) {
  return {
          operation: "Parsing",
          code: internalError.c,
          path: internalError.p
        };
}

function toSerializeError(internalError) {
  return {
          operation: "Serializing",
          code: internalError.c,
          path: internalError.p
        };
}

function getOrRethrow(jsExn) {
  if ((jsExn&&jsExn.s===symbol)) {
    return jsExn;
  }
  throw jsExn;
}

function prependLocationOrRethrow(jsExn, $$location) {
  var error = getOrRethrow(jsExn);
  var path = "[" + JSON.stringify($$location) + "]" + error.p;
  throw {
        c: error.c,
        p: path,
        s: symbol
      };
}

function make(selfStruct, path) {
  return {
          struct: selfStruct,
          fail: (function (message, customPathOpt) {
              var customPath = customPathOpt !== undefined ? customPathOpt : "";
              throw {
                    c: {
                      TAG: "OperationFailed",
                      _0: message
                    },
                    p: path + customPath,
                    s: symbol
                  };
            }),
          failWithError: (function (error) {
              throw {
                    c: error.code,
                    p: path + error.path,
                    s: symbol
                  };
            })
        };
}

function classify$1(struct) {
  return struct.t;
}

function noop(_b, param, inputVar, param$1) {
  return inputVar;
}

function noopOperation(i) {
  return i;
}

function scope(b, fn) {
  var prevVarsAllocation = b.l;
  var prevCode = b.c;
  b.l = "";
  b.c = "";
  var resultCode = fn(b);
  var varsAllocation = b.l;
  var code = varsAllocation === "" ? b.c : "let " + varsAllocation + ";" + b.c;
  b.l = prevVarsAllocation;
  b.c = prevCode;
  return code + resultCode;
}

function $$var(b) {
  var newCounter = b.v + 1;
  b.v = newCounter;
  var v = "v" + newCounter;
  var varsAllocation = b.l;
  b.l = varsAllocation === "" ? v : varsAllocation + "," + v;
  return v;
}

function varWithoutAllocation(b) {
  var newCounter = b.v + 1;
  b.v = newCounter;
  return "v" + newCounter;
}

function transform(b, inputVar, operation) {
  if (!b.a.has(inputVar)) {
    return operation(b, inputVar);
  }
  var prevCode = b.c;
  b.c = "";
  var operationOutputVar = operation(b, "t");
  var isAsyncOperation = b.a.has(operationOutputVar);
  var outputVar = $$var(b);
  b.a.add(outputVar);
  b.c = prevCode + (outputVar + "=()=>" + inputVar + "().then(t=>{" + b.c + "return " + operationOutputVar + (
      isAsyncOperation ? "()" : ""
    ) + "});");
  return outputVar;
}

function embedSyncOperation(b, inputVar, fn, isRefineOpt) {
  var isRefine = isRefineOpt !== undefined ? isRefineOpt : false;
  return transform(b, inputVar, (function (b, inputVar) {
                if (isRefine) {
                  b.c = b.c + ("e[" + (b.e.push(fn) - 1) + "](" + inputVar + ");");
                  return inputVar;
                } else {
                  return "e[" + (b.e.push(fn) - 1) + "](" + inputVar + ")";
                }
              }));
}

function embedAsyncOperation(b, inputVar, fn) {
  return transform(b, inputVar, (function (b, inputVar) {
                if (b.a.has(inputVar)) {
                  return "e[" + (b.e.push(fn) - 1) + "](" + inputVar + ")";
                }
                var outputVar = $$var(b);
                b.a.add(outputVar);
                b.c = b.c + (outputVar + "=" + ("e[" + (b.e.push(fn) - 1) + "]") + "(" + inputVar + ");");
                return outputVar;
              }));
}

function raiseWithArg(b, path, fn, arg) {
  return "e[" + (b.e.push(function (arg) {
                var code = fn(arg);
                throw {
                      c: code,
                      p: path,
                      s: symbol
                    };
              }) - 1) + "](" + arg + ")";
}

function invalidOperation(_b, path, description) {
  throw {
        c: {
          TAG: "InvalidOperation",
          description: description
        },
        p: path,
        s: symbol
      };
}

function withCatch(b, $$catch, fn) {
  var prevCode = b.c;
  b.c = "";
  var errorVar = "t";
  var maybeResolveVar = $$catch(b, errorVar);
  var catchCode = "if(" + (errorVar + "&&" + errorVar + ".s===s") + "){" + b.c;
  b.c = "";
  var fnOutputVar = fn(b);
  var isAsync = b.a.has(fnOutputVar);
  var isInlined = fnOutputVar[0] !== "v";
  var outputVar = isAsync || isInlined ? $$var(b) : fnOutputVar;
  var catchCode$1 = maybeResolveVar !== undefined ? (function (catchLocation) {
        return catchCode + (
                catchLocation === 1 ? "return Promise.resolve(" + maybeResolveVar + ")" : (
                    catchLocation === 2 ? "return " + maybeResolveVar : (
                        isAsync ? outputVar + "=()=>Promise.resolve(" + maybeResolveVar + ")" : outputVar + "=" + maybeResolveVar
                      )
                  )
              ) + ("}else{throw " + errorVar + "}");
      }) : (function (param) {
        return catchCode + "}throw " + errorVar;
      });
  b.c = prevCode + ("try{" + b.c + (
      isAsync ? (b.a.add(outputVar), outputVar + "=()=>{try{return " + fnOutputVar + "().catch(" + errorVar + "=>{" + catchCode$1(2) + "})}catch(" + errorVar + "){" + catchCode$1(1) + "}};") : (
          isInlined ? outputVar + "=" + fnOutputVar : ""
        )
    ) + "}catch(" + errorVar + "){" + catchCode$1(0) + "}");
  return outputVar;
}

function withPathPrepend(b, path, maybeDynamicLocationVar, fn) {
  try {
    return withCatch(b, (function (b, errorVar) {
                  b.c = errorVar + ".p=" + JSON.stringify(path) + "+" + (
                    maybeDynamicLocationVar !== undefined ? "'[\"'+" + maybeDynamicLocationVar + "+'\"]'+" : ""
                  ) + errorVar + ".p";
                }), (function (b) {
                  return fn(b, "");
                }));
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      var error = getOrRethrow(jsExn._1);
      throw {
            c: error.c,
            p: path + "[]" + error.p,
            s: symbol
          };
    }
    throw jsExn;
  }
}

function run(b, builder, struct, inputVar, path) {
  var asyncVarsCountBefore = b.a.size;
  var outputVar = builder(b, struct, inputVar, path);
  var isAsync = b.a.size > asyncVarsCountBefore;
  if (isAsync) {
    b.a.add(outputVar);
  }
  if (struct.pb === builder) {
    struct.i = isAsync;
  }
  return outputVar;
}

function build(builder, struct) {
  if (builder === noop) {
    if (struct.pb === builder) {
      struct.i = false;
    }
    return noopOperation;
  }
  var intitialInputVar = "i";
  var b = {
    v: -1,
    l: "",
    c: "",
    a: new Set(),
    e: []
  };
  var inlinedFunction = intitialInputVar + "=>{" + scope(b, (function (b) {
          var outputVar = run(b, builder, struct, intitialInputVar, "");
          return "return " + outputVar;
        })) + "}";
  console.log(inlinedFunction);
  return new Function("e", "s", "return " + inlinedFunction)(b.e, symbol);
}

function compileParser(struct, builder) {
  var operation = build(builder, struct);
  var isAsync = struct.i;
  struct.p = isAsync ? (function (param) {
        throw {
              c: "UnexpectedAsync",
              p: "",
              s: symbol
            };
      }) : operation;
  struct.a = isAsync ? operation : (function (input) {
        var syncValue = operation(input);
        return function () {
          return Promise.resolve(syncValue);
        };
      });
}

function compileSerializer(struct, builder) {
  var operation = build(builder, struct);
  struct.s = operation;
}

function loop(_struct) {
  while(true) {
    var struct = _struct;
    var literal = struct.t;
    if (typeof literal !== "object") {
      throw symbol;
    }
    switch (literal.TAG) {
      case "Literal" :
          return literal._0;
      case "Object" :
          return {
                  TAG: "Dict",
                  _0: mapValues(literal.fields, loop)
                };
      case "Tuple" :
          return {
                  TAG: "Array",
                  _0: literal._0.map(function (a) {
                        return loop(a);
                      })
                };
      case "Union" :
          _struct = literal._0[0];
          continue ;
      default:
        throw symbol;
    }
  };
}

function toLiteral(struct) {
  try {
    return loop(struct);
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      var jsExn$1 = jsExn._1;
      if (jsExn$1 === symbol) {
        return ;
      }
      throw jsExn$1;
    }
    throw jsExn;
  }
}

function isAsyncParse(struct) {
  var v = struct.i;
  if (v !== 0) {
    return v;
  }
  try {
    compileParser(struct, struct.pb);
    return struct.i;
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      getOrRethrow(jsExn._1);
      return false;
    }
    throw jsExn;
  }
}

function initialSerialize(input) {
  var struct = this;
  compileSerializer(struct, struct.sb);
  return struct.s(input);
}

function validateJsonableStruct(_struct, rootStruct, _isRootOpt, _param) {
  while(true) {
    var isRootOpt = _isRootOpt;
    var struct = _struct;
    var isRoot = isRootOpt !== undefined ? isRootOpt : false;
    if (!(isRoot || rootStruct !== struct)) {
      return ;
    }
    var childrenStructs = struct.t;
    var exit = 0;
    if (typeof childrenStructs !== "object") {
      if (childrenStructs !== "Unknown") {
        return ;
      }
      exit = 2;
    } else {
      switch (childrenStructs.TAG) {
        case "Literal" :
            if (isJsonable(childrenStructs._0)) {
              return ;
            }
            exit = 2;
            break;
        case "Option" :
            exit = 2;
            break;
        case "Object" :
            var fieldNames = childrenStructs.fieldNames;
            var fields = childrenStructs.fields;
            for(var idx = 0 ,idx_finish = fieldNames.length; idx < idx_finish; ++idx){
              var fieldName = fieldNames[idx];
              var fieldStruct = fields[fieldName];
              try {
                var s = fieldStruct.t;
                var tmp;
                tmp = typeof s !== "object" || s.TAG !== "Option" ? fieldStruct : s._0;
                validateJsonableStruct(tmp, rootStruct, undefined, undefined);
              }
              catch (raw_jsExn){
                var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
                if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
                  prependLocationOrRethrow(jsExn._1, fieldName);
                } else {
                  throw jsExn;
                }
              }
            }
            return ;
        case "Tuple" :
            childrenStructs._0.forEach(function (struct, i) {
                  try {
                    return validateJsonableStruct(struct, rootStruct, undefined, undefined);
                  }
                  catch (raw_jsExn){
                    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
                    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
                      return prependLocationOrRethrow(jsExn._1, i.toString());
                    }
                    throw jsExn;
                  }
                });
            return ;
        case "Union" :
            childrenStructs._0.forEach(function (struct) {
                  validateJsonableStruct(struct, rootStruct, undefined, undefined);
                });
            return ;
        case "Null" :
        case "Array" :
        case "Dict" :
            exit = 1;
            break;
        
      }
    }
    switch (exit) {
      case 1 :
          _param = undefined;
          _isRootOpt = undefined;
          _struct = childrenStructs._0;
          continue ;
      case 2 :
          throw {
                c: {
                  TAG: "InvalidJsonStruct",
                  _0: struct
                },
                p: "",
                s: symbol
              };
      
    }
  };
}

function initialSerializeToJson(input) {
  var struct = this;
  try {
    validateJsonableStruct(struct, struct, true, undefined);
    if (struct.s === initialSerialize) {
      compileSerializer(struct, struct.sb);
    }
    struct.j = struct.s;
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      var error = getOrRethrow(jsExn._1);
      struct.j = (function (param) {
          throw error;
        });
    } else {
      throw jsExn;
    }
  }
  return struct.j(input);
}

function intitialParse(input) {
  var struct = this;
  compileParser(struct, struct.pb);
  return struct.p(input);
}

function intitialParseAsync(input) {
  var struct = this;
  compileParser(struct, struct.pb);
  return struct.a(input);
}

var Raised = /* @__PURE__ */Caml_exceptions.create("S-RescriptStruct.Raised");

function parseAnyWith(any, struct) {
  try {
    return {
            TAG: "Ok",
            _0: struct.p(any)
          };
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: toParseError(getOrRethrow(jsExn._1))
            };
    }
    throw jsExn;
  }
}

function parseAnyOrRaiseWith(any, struct) {
  try {
    return struct.p(any);
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      throw {
            RE_EXN_ID: Raised,
            _1: toParseError(getOrRethrow(jsExn._1)),
            Error: new Error()
          };
    }
    throw jsExn;
  }
}

function asyncPrepareOk(value) {
  return {
          TAG: "Ok",
          _0: value
        };
}

function asyncPrepareError(jsExn) {
  return {
          TAG: "Error",
          _0: toParseError(getOrRethrow(jsExn))
        };
}

function parseAnyAsyncWith(any, struct) {
  try {
    return struct.a(any)(undefined).then(asyncPrepareOk, asyncPrepareError);
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      return Promise.resolve({
                  TAG: "Error",
                  _0: toParseError(getOrRethrow(jsExn._1))
                });
    }
    throw jsExn;
  }
}

function parseAnyAsyncInStepsWith(any, struct) {
  try {
    var asyncFn = struct.a(any);
    return {
            TAG: "Ok",
            _0: (function () {
                return asyncFn(undefined).then(asyncPrepareOk, asyncPrepareError);
              })
          };
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: toParseError(getOrRethrow(jsExn._1))
            };
    }
    throw jsExn;
  }
}

function serializeToUnknownWith(value, struct) {
  try {
    return {
            TAG: "Ok",
            _0: struct.s(value)
          };
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: toSerializeError(getOrRethrow(jsExn._1))
            };
    }
    throw jsExn;
  }
}

function serializeOrRaiseWith(value, struct) {
  try {
    return struct.j(value);
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      throw {
            RE_EXN_ID: Raised,
            _1: toSerializeError(getOrRethrow(jsExn._1)),
            Error: new Error()
          };
    }
    throw jsExn;
  }
}

function serializeToUnknownOrRaiseWith(value, struct) {
  try {
    return struct.s(value);
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      throw {
            RE_EXN_ID: Raised,
            _1: toSerializeError(getOrRethrow(jsExn._1)),
            Error: new Error()
          };
    }
    throw jsExn;
  }
}

function serializeWith(value, struct) {
  try {
    return {
            TAG: "Ok",
            _0: struct.j(value)
          };
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: toSerializeError(getOrRethrow(jsExn._1))
            };
    }
    throw jsExn;
  }
}

function serializeToJsonStringWith(value, struct, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  var json = serializeWith(value, struct);
  if (json.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: JSON.stringify(json._0, null, space)
          };
  } else {
    return json;
  }
}

function parseJsonStringWith(json, struct) {
  var json$1;
  try {
    json$1 = {
      TAG: "Ok",
      _0: JSON.parse(json)
    };
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Js_exn.$$Error) {
      json$1 = {
        TAG: "Error",
        _0: {
          operation: "Parsing",
          code: {
            TAG: "OperationFailed",
            _0: error._1.message
          },
          path: ""
        }
      };
    } else {
      throw error;
    }
  }
  if (json$1.TAG === "Ok") {
    return parseAnyWith(json$1._0, struct);
  } else {
    return json$1;
  }
}

function make$1(namespace, name) {
  return namespace + ":" + name;
}

var Id = {
  make: make$1
};

var empty = {};

var make1 = ((id,metadata)=>({[id]:metadata}));

function set(map, id, metadata) {
  if (map === empty) {
    return ({[id]:metadata});
  }
  var copy = Object.assign({}, map);
  copy[id] = metadata;
  return copy;
}

function get(struct, id) {
  return struct.m[id];
}

function set$1(struct, id, metadata) {
  var metadataMap = set(struct.m, id, metadata);
  return {
          t: struct.t,
          pb: struct.pb,
          sb: struct.sb,
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: metadataMap
        };
}

function recursive(fn) {
  var placeholder = {
    m: empty
  };
  var struct = fn(placeholder);
  Object.assign(placeholder, struct);
  var builder = placeholder.pb;
  placeholder.pb = (function (b, selfStruct, inputVar, path) {
      selfStruct.pb = noop;
      var asyncVars = new Set();
      builder({
            v: -1,
            l: "",
            c: "",
            a: asyncVars,
            e: []
          }, selfStruct, inputVar, path);
      var isAsync = asyncVars.size > 0;
      selfStruct.pb = (function (b, selfStruct, inputVar, param) {
          if (isAsync) {
            return embedAsyncOperation(b, inputVar, (function (input) {
                          return selfStruct.a(input);
                        }));
          } else {
            return embedSyncOperation(b, inputVar, (function (input) {
                          return selfStruct.p(input);
                        }), undefined);
          }
        });
      compileParser(selfStruct, builder);
      selfStruct.pb = builder;
      return withPathPrepend(b, path, undefined, (function (b, param) {
                    if (isAsync) {
                      return embedAsyncOperation(b, inputVar, selfStruct.a);
                    } else {
                      return embedSyncOperation(b, inputVar, selfStruct.p, undefined);
                    }
                  }));
    });
  var builder$1 = placeholder.sb;
  placeholder.sb = (function (b, selfStruct, inputVar, path) {
      selfStruct.sb = (function (b, selfStruct, inputVar, param) {
          return embedSyncOperation(b, inputVar, (function (input) {
                        return selfStruct.s(input);
                      }), undefined);
        });
      compileSerializer(selfStruct, builder$1);
      selfStruct.sb = builder$1;
      return withPathPrepend(b, path, undefined, (function (b, param) {
                    return embedSyncOperation(b, inputVar, selfStruct.s, undefined);
                  }));
    });
  return placeholder;
}

var nameMetadataId = "rescript-struct:name";

function name(struct) {
  var n = struct.m[nameMetadataId];
  if (n !== undefined) {
    return n;
  }
  var tagged = struct.t;
  if (typeof tagged !== "object") {
    return tagged;
  }
  switch (tagged.TAG) {
    case "Literal" :
        return "Literal(" + toText(tagged._0) + ")";
    case "Option" :
        return "Option(" + name(tagged._0) + ")";
    case "Null" :
        return "Null(" + name(tagged._0) + ")";
    case "Array" :
        return "Array(" + name(tagged._0) + ")";
    case "Object" :
        var fields = tagged.fields;
        return "Object({" + tagged.fieldNames.map(function (fieldName) {
                      var fieldStruct = fields[fieldName];
                      return JSON.stringify(fieldName) + ": " + name(fieldStruct);
                    }).join(", ") + "})";
    case "Tuple" :
        return "Tuple(" + tagged._0.map(function (s) {
                      return name(s);
                    }).join(", ") + ")";
    case "Union" :
        return "Union(" + tagged._0.map(function (s) {
                      return name(s);
                    }).join(", ") + ")";
    case "Dict" :
        return "Dict(" + name(tagged._0) + ")";
    
  }
}

function setName(struct, name) {
  return set$1(struct, nameMetadataId, name);
}

function refine(struct, refiner) {
  return {
          t: struct.t,
          pb: (function (b, selfStruct, inputVar, path) {
              return embedSyncOperation(b, run(b, struct.pb, struct, inputVar, path), refiner(make(selfStruct, path)), true);
            }),
          sb: (function (b, selfStruct, inputVar, path) {
              return run(b, struct.pb, struct, embedSyncOperation(b, inputVar, refiner(make(selfStruct, path)), true), path);
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: struct.m
        };
}

function addRefinement(struct, metadataId, refinement, refiner) {
  var refinements = struct.m[metadataId];
  return refine(set$1(struct, metadataId, refinements !== undefined ? refinements.concat(refinement) : [refinement]), refiner);
}

function transform$1(struct, transformer) {
  return {
          t: struct.t,
          pb: (function (b, selfStruct, inputVar, path) {
              var inputVar$1 = run(b, struct.pb, struct, inputVar, path);
              var match = transformer(make(selfStruct, path));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.transform doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                } else {
                  return embedSyncOperation(b, inputVar$1, parser, undefined);
                }
              }
              var asyncParser = match.a;
              if (asyncParser !== undefined) {
                return embedAsyncOperation(b, inputVar$1, asyncParser);
              } else if (match.s !== undefined) {
                return invalidOperation(b, path, "The S.transform parser is missing");
              } else {
                return inputVar$1;
              }
            }),
          sb: (function (b, selfStruct, inputVar, path) {
              var match = transformer(make(selfStruct, path));
              var serializer = match.s;
              if (serializer !== undefined) {
                return run(b, struct.sb, struct, embedSyncOperation(b, inputVar, serializer, undefined), path);
              } else if (match.a !== undefined || match.p !== undefined) {
                return invalidOperation(b, path, "The S.transform serializer is missing");
              } else {
                return run(b, struct.sb, struct, inputVar, path);
              }
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: struct.m
        };
}

function preprocess(struct, transformer) {
  var unionStructs = struct.t;
  if (typeof unionStructs === "object" && unionStructs.TAG === "Union") {
    return {
            t: {
              TAG: "Union",
              _0: unionStructs._0.map(function (unionStruct) {
                    return preprocess(unionStruct, transformer);
                  })
            },
            pb: struct.pb,
            sb: struct.sb,
            i: 0,
            s: initialSerialize,
            j: initialSerializeToJson,
            p: intitialParse,
            a: intitialParseAsync,
            m: struct.m
          };
  }
  return {
          t: struct.t,
          pb: (function (b, selfStruct, inputVar, path) {
              var match = transformer(make(selfStruct, path));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.preprocess doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                }
                var operationResultVar = $$var(b);
                b.c = b.c + (operationResultVar + "=" + embedSyncOperation(b, inputVar, parser, undefined) + ";");
                return run(b, struct.pb, struct, operationResultVar, path);
              }
              var asyncParser = match.a;
              if (asyncParser === undefined) {
                return run(b, struct.pb, struct, inputVar, path);
              }
              var parseResultVar = embedAsyncOperation(b, inputVar, asyncParser);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "=()=>" + parseResultVar + "().then(t=>{" + scope(b, (function (b) {
                        var structOutputVar = run(b, struct.pb, struct, "t", path);
                        var isAsync = struct.i;
                        return "return " + (
                                isAsync ? structOutputVar + "()" : structOutputVar
                              );
                      })) + "});");
              return outputVar;
            }),
          sb: (function (b, selfStruct, inputVar, path) {
              var inputVar$1 = run(b, struct.sb, struct, inputVar, path);
              var match = transformer(make(selfStruct, path));
              var serializer = match.s;
              if (serializer !== undefined) {
                return embedSyncOperation(b, inputVar$1, serializer, undefined);
              } else {
                return inputVar$1;
              }
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: struct.m
        };
}

function custom(name, definer) {
  return {
          t: "Unknown",
          pb: (function (b, selfStruct, inputVar, path) {
              var match = definer(make(selfStruct, path));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.custom doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                } else {
                  return embedSyncOperation(b, inputVar, parser, undefined);
                }
              }
              var asyncParser = match.a;
              if (asyncParser !== undefined) {
                return embedAsyncOperation(b, inputVar, asyncParser);
              } else if (match.s !== undefined) {
                return invalidOperation(b, path, "The S.custom parser is missing");
              } else {
                return inputVar;
              }
            }),
          sb: (function (b, selfStruct, inputVar, path) {
              var match = definer(make(selfStruct, path));
              var serializer = match.s;
              if (serializer !== undefined) {
                return embedSyncOperation(b, inputVar, serializer, undefined);
              } else if (match.a !== undefined || match.p !== undefined) {
                return invalidOperation(b, path, "The S.custom serializer is missing");
              } else {
                return inputVar;
              }
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: make1(nameMetadataId, name)
        };
}

function literalCheckBuilder(b, value, inputVar) {
  if (Number.isNaN(value)) {
    return "Number.isNaN(" + inputVar + ")";
  }
  if (value === null) {
    return inputVar + "===null";
  }
  if (value === (void 0)) {
    return inputVar + "===void 0";
  }
  var check = inputVar + "===" + ("e[" + (b.e.push(value) - 1) + "]");
  if (Array.isArray(value)) {
    return "(" + check + "||Array.isArray(" + inputVar + ")&&" + inputVar + ".length===" + value.length + (
            value.length > 0 ? "&&" + value.map(function (item, idx) {
                      return literalCheckBuilder(b, item, inputVar + "[" + idx + "]");
                    }).join("&&") : ""
          ) + ")";
  }
  if (!(value&&value.constructor===Object)) {
    return check;
  }
  var keys = Object.keys(value);
  var numberOfKeys = keys.length;
  return "(" + check + "||" + inputVar + "&&" + inputVar + ".constructor===Object&&Object.keys(" + inputVar + ").length===" + numberOfKeys + (
          numberOfKeys > 0 ? "&&" + keys.map(function (key) {
                    return literalCheckBuilder(b, value[key], inputVar + "[" + JSON.stringify(key) + "]");
                  }).join("&&") : ""
        ) + ")";
}

function literal(value) {
  var literal$1 = classify(value);
  var operationBuilder = function (b, param, inputVar, path) {
    b.c = b.c + (literalCheckBuilder(b, value, inputVar) + "||" + raiseWithArg(b, path, (function (input) {
              return {
                      TAG: "InvalidLiteral",
                      expected: literal$1,
                      received: input
                    };
            }), inputVar) + ";");
    return inputVar;
  };
  return {
          t: {
            TAG: "Literal",
            _0: literal$1
          },
          pb: operationBuilder,
          sb: operationBuilder,
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

var unit = literal((void 0));

function toKindWithSet(definition, embededSet) {
  if (embededSet.has(definition)) {
    return 2;
  } else if (typeof definition === "object" && definition !== null) {
    return 0;
  } else {
    return 1;
  }
}

function factory(struct, definer) {
  return {
          t: struct.t,
          pb: (function (b, param, inputVar, path) {
              return embedSyncOperation(b, run(b, struct.pb, struct, inputVar, path), definer, undefined);
            }),
          sb: (function (b, selfStruct, inputVar, path) {
              var definition = definer(symbol);
              var definitionToOutput = function (definition, outputPath) {
                var kind = symbol === definition ? 2 : (
                    typeof definition === "object" && definition !== null ? 0 : 1
                  );
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      var maybeOutputRef = 0;
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        var maybeOutput = definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                        var match = maybeOutputRef;
                        if (typeof match !== "string") {
                          if (match === 0) {
                            maybeOutputRef = maybeOutput;
                          }
                          
                        } else if (!(typeof maybeOutput !== "string" && maybeOutput === 0)) {
                          maybeOutputRef = 1;
                        }
                        
                      }
                      return maybeOutputRef;
                  case 1 :
                      var constantVar = $$var(b);
                      b.c = b.c + (constantVar + "=" + inputVar + outputPath + ";if(" + constantVar + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                                return {
                                        TAG: "InvalidLiteral",
                                        expected: classify(definition),
                                        received: input
                                      };
                              }), constantVar) + "}");
                      return 0;
                  case 2 :
                      return inputVar + outputPath;
                  
                }
              };
              var output = definitionToOutput(definition, "");
              if (typeof output === "string") {
                return run(b, struct.sb, struct, output, path);
              }
              if (output !== 0) {
                return invalidOperation(b, path, "Can't create serializer. The S.variant's value is registered multiple times. Use S.transform instead");
              }
              var literal = toLiteral(selfStruct);
              if (literal === undefined) {
                return invalidOperation(b, path, "Can't create serializer. The S.variant's value is not registered and not a literal. Use S.transform instead");
              }
              var value$1 = value(literal);
              return run(b, struct.sb, struct, "e[" + (b.e.push(value$1) - 1) + "]", path);
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: struct.m
        };
}

var defaultMetadataId = "rescript-struct:Option.default";

function $$default(struct) {
  return struct.m[defaultMetadataId];
}

function parseOperationBuilder(b, selfStruct, inputVar, path) {
  var outputVar = $$var(b);
  var isNull = (selfStruct.t.TAG === "Null");
  var innerStruct = selfStruct.t._0;
  var ifCode = scope(b, (function (b) {
          return outputVar + "=" + run(b, innerStruct.pb, innerStruct, inputVar, path);
        }));
  var isAsync = innerStruct.i;
  b.c = b.c + ("if(" + inputVar + "!==" + (
      isNull ? "null" : "void 0"
    ) + "){" + ifCode + "}else{" + outputVar + "=" + (
      isAsync ? "()=>Promise.resolve(void 0)" : "void 0"
    ) + "}");
  return outputVar;
}

function serializeOperationBuilder(b, selfStruct, inputVar, path) {
  var outputVar = $$var(b);
  var isNull = (selfStruct.t.TAG === "Null");
  var innerStruct = selfStruct.t._0;
  b.c = b.c + ("if(" + inputVar + "!==void 0){" + scope(b, (function (b) {
            var value = Caml_option.valFromOption;
            return outputVar + "=" + run(b, innerStruct.sb, innerStruct, "e[" + (b.e.push(value) - 1) + "](" + inputVar + ")", path);
          })) + "}else{" + outputVar + "=" + (
      isNull ? "null" : "void 0"
    ) + "}");
  return outputVar;
}

function factory$1(struct) {
  return {
          t: {
            TAG: "Option",
            _0: struct
          },
          pb: parseOperationBuilder,
          sb: serializeOperationBuilder,
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function getWithDefault(struct, $$default) {
  return {
          t: struct.t,
          pb: (function (b, param, inputVar, path) {
              return transform(b, run(b, struct.pb, struct, inputVar, path), (function (b, inputVar) {
                            var tmp;
                            tmp = $$default.TAG === "Value" ? "e[" + (b.e.push($$default._0) - 1) + "]" : "e[" + (b.e.push($$default._0) - 1) + "]()";
                            return inputVar + "===void 0?" + tmp + ":" + inputVar;
                          }));
            }),
          sb: struct.sb,
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: set(struct.m, defaultMetadataId, $$default)
        };
}

function getOr(struct, defalutValue) {
  return getWithDefault(struct, {
              TAG: "Value",
              _0: defalutValue
            });
}

function getOrWith(struct, defalutCb) {
  return getWithDefault(struct, {
              TAG: "Callback",
              _0: defalutCb
            });
}

function factory$2(struct) {
  return {
          t: {
            TAG: "Null",
            _0: struct
          },
          pb: parseOperationBuilder,
          sb: serializeOperationBuilder,
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet, definition, typeRefinement, unknownKeysRefinement) {
  return function (b, selfStruct, inputVar, path) {
    var asyncOutputVars = [];
    typeRefinement(b, selfStruct, inputVar, path);
    var prevCode = b.c;
    b.c = "";
    unknownKeysRefinement(b, selfStruct, inputVar, path);
    var unknownKeysRefinementCode = b.c;
    b.c = "";
    var definitionToOutput = function (definition, outputPath) {
      var kind = toKindWithSet(definition, itemDefinitionsSet);
      switch (kind) {
        case 0 :
            var isArray = Array.isArray(definition);
            var keys = Object.keys(definition);
            var codeRef = isArray ? "[" : "{";
            for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
              var key = keys[idx];
              var definition$1 = definition[key];
              var output = definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
              codeRef = codeRef + (
                isArray ? output : JSON.stringify(key) + ":" + output
              ) + ",";
            }
            return codeRef + (
                    isArray ? "]" : "}"
                  );
        case 1 :
            return "e[" + (b.e.push(definition) - 1) + "]";
        case 2 :
            definition.r = 1;
            var inputPath = definition.p;
            var struct = definition.s;
            var fieldInputVar = $$var(b);
            b.c = b.c + (fieldInputVar + "=" + inputVar + inputPath + ";");
            var fieldOuputVar = run(b, struct.pb, struct, fieldInputVar, path + inputPath);
            var isAsyncField = struct.i;
            if (isAsyncField) {
              asyncOutputVars.push(fieldOuputVar);
            }
            return fieldOuputVar;
        
      }
    };
    var syncOutput = definitionToOutput(definition, "");
    var registeredFieldsCode = b.c;
    b.c = "";
    for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
      var match = itemDefinitions[idx];
      var inputPath = match.p;
      var struct = match.s;
      var registered = match.r;
      if (registered === 0) {
        var fieldInputVar = $$var(b);
        b.c = b.c + (fieldInputVar + "=" + inputVar + inputPath + ";");
        var fieldOuputVar = run(b, struct.pb, struct, fieldInputVar, path + inputPath);
        var isAsyncField = struct.i;
        if (isAsyncField) {
          asyncOutputVars.push(fieldOuputVar);
        }
        
      }
      
    }
    var unregisteredFieldsCode = b.c;
    b.c = prevCode + unregisteredFieldsCode + registeredFieldsCode + unknownKeysRefinementCode;
    if (asyncOutputVars.length === 0) {
      return syncOutput;
    }
    var outputVar = $$var(b);
    b.c = b.c + (outputVar + "=()=>Promise.all([" + asyncOutputVars.map(function (asyncOutputVar) {
              return asyncOutputVar + "()";
            }).join(",") + "]).then(([" + asyncOutputVars.toString() + "])=>(" + syncOutput + "));");
    return outputVar;
  };
}

function typeRefinement(b, selfStruct, inputVar, path) {
  b.c = b.c + ("if(!" + inputVar + "||" + inputVar + ".constructor!==Object){" + raiseWithArg(b, path, (function (input) {
            return {
                    TAG: "InvalidType",
                    expected: selfStruct,
                    received: input
                  };
          }), inputVar) + "}");
}

function factory$3(definer) {
  var fields = {};
  var fieldNames = [];
  var itemDefinitionsSet = new Set();
  var field = function (fieldName, struct) {
    var inlinedInputLocation = JSON.stringify(fieldName);
    if (fields[fieldName]) {
      throw new Error("[rescript-struct] " + ("The field " + inlinedInputLocation + " is defined multiple times. If you want to duplicate the field, use S.transform instead."));
    }
    var itemDefinition = {
      s: struct,
      l: inlinedInputLocation,
      p: "[" + inlinedInputLocation + "]",
      r: 0
    };
    fields[fieldName] = struct;
    fieldNames.push(fieldName);
    itemDefinitionsSet.add(itemDefinition);
    return itemDefinition;
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, literal(asValue));
  };
  var fieldOr = function (fieldName, struct, or) {
    return field(fieldName, getOr(factory$1(struct), or));
  };
  var ctx = {
    n: fieldNames,
    h: fields,
    d: itemDefinitionsSet,
    f: field,
    o: fieldOr,
    t: tag
  };
  var definition = definer(ctx);
  var itemDefinitionsSet$1 = itemDefinitionsSet;
  var itemDefinitions = Array.from(itemDefinitionsSet$1);
  return {
          t: {
            TAG: "Object",
            fields: fields,
            fieldNames: fieldNames,
            unknownKeys: "Strip"
          },
          pb: makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet$1, definition, typeRefinement, (function (b, selfStruct, inputVar, path) {
                  var withUnknownKeysRefinement = selfStruct.t.unknownKeys === "Strict";
                  if (!withUnknownKeysRefinement) {
                    return ;
                  }
                  if (itemDefinitions.length !== 0) {
                    var keyVar = $$var(b);
                    b.c = b.c + ("for(" + keyVar + " in " + inputVar + "){if(");
                    for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                      var itemDefinition = itemDefinitions[idx];
                      if (idx !== 0) {
                        b.c = b.c + "&&";
                      }
                      b.c = b.c + (keyVar + "!==" + itemDefinition.l);
                    }
                    b.c = b.c + ("){" + raiseWithArg(b, path, (function (exccessFieldName) {
                              return {
                                      TAG: "ExcessField",
                                      _0: exccessFieldName
                                    };
                            }), keyVar) + "}}");
                    return ;
                  }
                  var keyVar$1 = $$var(b);
                  b.c = b.c + ("for(" + keyVar$1 + " in " + inputVar + "){" + raiseWithArg(b, path, (function (exccessFieldName) {
                            return {
                                    TAG: "ExcessField",
                                    _0: exccessFieldName
                                  };
                          }), keyVar$1) + "}");
                })),
          sb: (function (b, param, inputVar, path) {
              var fieldsCodeRef = {
                contents: ""
              };
              var prevCode = b.c;
              b.c = "";
              var definitionToOutput = function (definition, outputPath) {
                var kind = toKindWithSet(definition, itemDefinitionsSet$1);
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                      }
                      return ;
                  case 1 :
                      b.c = "if(" + inputVar + outputPath + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                              return {
                                      TAG: "InvalidLiteral",
                                      expected: classify(definition),
                                      received: input
                                    };
                            }), inputVar + outputPath) + "}" + b.c;
                      return ;
                  case 2 :
                      var inlinedInputLocation = definition.l;
                      var struct = definition.s;
                      var match = definition.r;
                      switch (match) {
                        case 0 :
                        case 1 :
                            break;
                        case 2 :
                            return invalidOperation(b, path, "The field " + definition.l + " is registered multiple times. If you want to duplicate the field, use S.transform instead");
                        
                      }
                      definition.r = 2;
                      if (struct.sb === noop) {
                        fieldsCodeRef.contents = fieldsCodeRef.contents + (inlinedInputLocation + ":" + inputVar + outputPath + ",");
                        return ;
                      }
                      var fieldInputVar = $$var(b);
                      b.c = b.c + (fieldInputVar + "=" + inputVar + outputPath + ";");
                      var fieldOuputVar = run(b, struct.sb, struct, fieldInputVar, path + outputPath);
                      fieldsCodeRef.contents = fieldsCodeRef.contents + (inlinedInputLocation + ":" + fieldOuputVar + ",");
                      return ;
                      break;
                  
                }
              };
              definitionToOutput(definition, "");
              b.c = prevCode + b.c;
              for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                var match = itemDefinitions[idx];
                var inlinedInputLocation = match.l;
                var registered = match.r;
                if (registered === 0) {
                  var literal = toLiteral(match.s);
                  if (literal !== undefined) {
                    var value$1 = value(literal);
                    fieldsCodeRef.contents = fieldsCodeRef.contents + (inlinedInputLocation + ":" + ("e[" + (b.e.push(value$1) - 1) + "]") + ",");
                  } else {
                    invalidOperation(b, path, "Can't create serializer. The " + inlinedInputLocation + " field is not registered and not a literal. Use S.transform instead");
                  }
                }
                
              }
              return "{" + fieldsCodeRef.contents + "}";
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function strip(struct) {
  var match = struct.t;
  if (typeof match !== "object" || !(match.TAG === "Object" && match.unknownKeys !== "Strip")) {
    return struct;
  } else {
    return {
            t: {
              TAG: "Object",
              fields: match.fields,
              fieldNames: match.fieldNames,
              unknownKeys: "Strip"
            },
            pb: struct.pb,
            sb: struct.sb,
            i: 0,
            s: initialSerialize,
            j: initialSerializeToJson,
            p: intitialParse,
            a: intitialParseAsync,
            m: struct.m
          };
  }
}

function strict(struct) {
  var match = struct.t;
  if (typeof match !== "object" || !(match.TAG === "Object" && match.unknownKeys === "Strip")) {
    return struct;
  } else {
    return {
            t: {
              TAG: "Object",
              fields: match.fields,
              fieldNames: match.fieldNames,
              unknownKeys: "Strict"
            },
            pb: struct.pb,
            sb: struct.sb,
            i: 0,
            s: initialSerialize,
            j: initialSerializeToJson,
            p: intitialParse,
            a: intitialParseAsync,
            m: struct.m
          };
  }
}

function builder(b, selfStruct, inputVar, path) {
  b.c = b.c + raiseWithArg(b, path, (function (input) {
          return {
                  TAG: "InvalidType",
                  expected: selfStruct,
                  received: input
                };
        }), inputVar) + ";";
  return inputVar;
}

var struct = {
  t: "Never",
  pb: builder,
  sb: builder,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

var struct$1 = {
  t: "Unknown",
  pb: noop,
  sb: noop,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

var metadataId = "rescript-struct:String.refinements";

function refinements(struct) {
  var m = struct.m[metadataId];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var cuidRegex = /^c[^\s-]{8,}$/i;

var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;

var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;

var datetimeRe = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/;

function parseOperationBuilder$1(b, selfStruct, inputVar, path) {
  b.c = b.c + ("if(typeof " + inputVar + "!==\"string\"){" + raiseWithArg(b, path, (function (input) {
            return {
                    TAG: "InvalidType",
                    expected: selfStruct,
                    received: input
                  };
          }), inputVar) + "}");
  return inputVar;
}

var struct$2 = {
  t: "String",
  pb: parseOperationBuilder$1,
  sb: noop,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

function min(struct, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or more characters long";
  var refiner = function (s) {
    return function (value) {
      if (value.length < length) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, refiner);
}

function max(struct, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or fewer characters long";
  var refiner = function (s) {
    return function (value) {
      if (value.length > length) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, refiner);
}

function length(struct, length$1, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be exactly " + length$1 + " characters long";
  var refiner = function (s) {
    return function (value) {
      if (value.length !== length$1) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: {
                TAG: "Length",
                length: length$1
              },
              message: message
            }, refiner);
}

function email(struct, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid email address";
  var refiner = function (s) {
    return function (value) {
      if (!emailRegex.test(value)) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: "Email",
              message: message
            }, refiner);
}

function uuid(struct, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid UUID";
  var refiner = function (s) {
    return function (value) {
      if (!uuidRegex.test(value)) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: "Uuid",
              message: message
            }, refiner);
}

function cuid(struct, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid CUID";
  var refiner = function (s) {
    return function (value) {
      if (!cuidRegex.test(value)) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: "Cuid",
              message: message
            }, refiner);
}

function url(struct, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid url";
  var refiner = function (s) {
    return function (value) {
      var tmp;
      try {
        new URL(value);
        tmp = true;
      }
      catch (exn){
        tmp = false;
      }
      if (!tmp) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: "Url",
              message: message
            }, refiner);
}

function pattern(struct, re, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid";
  var refiner = function (s) {
    return function (value) {
      re.lastIndex = 0;
      if (!re.test(value)) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId, {
              kind: {
                TAG: "Pattern",
                re: re
              },
              message: message
            }, refiner);
}

function datetime(struct, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid datetime string! Must be UTC";
  var refinement = {
    kind: "Datetime",
    message: message
  };
  var refinements = struct.m[metadataId];
  return transform$1(set$1(struct, metadataId, refinements !== undefined ? refinements.concat(refinement) : [refinement]), (function (s) {
                return {
                        p: (function (string) {
                            if (!datetimeRe.test(string)) {
                              s.fail(message, undefined);
                            }
                            return new Date(string);
                          }),
                        s: (function (date) {
                            return date.toISOString();
                          })
                      };
              }));
}

function trim(struct) {
  var transformer = function (string) {
    return string.trim();
  };
  return transform$1(struct, (function (param) {
                return {
                        p: transformer,
                        s: transformer
                      };
              }));
}

function factory$4(struct) {
  try {
    validateJsonableStruct(struct, struct, true, undefined);
  }
  catch (raw_jsExn){
    var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
      getOrRethrow(jsExn._1);
      var message = "The struct " + name(struct) + " passed to S.jsonString is not compatible with JSON";
      throw new Error("[rescript-struct] " + message);
    }
    throw jsExn;
  }
  return {
          t: "String",
          pb: (function (b, selfStruct, inputVar, path) {
              var jsonStringVar = run(b, parseOperationBuilder$1, selfStruct, inputVar, path);
              var jsonVar = $$var(b);
              b.c = b.c + ("try{" + jsonVar + "=JSON.parse(" + jsonStringVar + ")}catch(t){" + raiseWithArg(b, path, (function (message) {
                        return {
                                TAG: "OperationFailed",
                                _0: message
                              };
                      }), "t.message") + "}");
              return run(b, struct.pb, struct, jsonVar, path);
            }),
          sb: (function (b, param, inputVar, path) {
              return "JSON.stringify(" + run(b, struct.sb, struct, inputVar, path) + ")";
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

var struct$3 = {
  t: "Bool",
  pb: (function (b, selfStruct, inputVar, path) {
      b.c = b.c + ("if(typeof " + inputVar + "!==\"boolean\"){" + raiseWithArg(b, path, (function (input) {
                return {
                        TAG: "InvalidType",
                        expected: selfStruct,
                        received: input
                      };
              }), inputVar) + "}");
      return inputVar;
    }),
  sb: noop,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

var metadataId$1 = "rescript-struct:Int.refinements";

function refinements$1(struct) {
  var m = struct.m[metadataId$1];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var struct$4 = {
  t: "Int",
  pb: (function (b, selfStruct, inputVar, path) {
      b.c = b.c + ("if(!(typeof " + inputVar + "===\"number\"&&" + inputVar + "<2147483648&&" + inputVar + ">-2147483649&&" + inputVar + "%1===0)){" + raiseWithArg(b, path, (function (input) {
                return {
                        TAG: "InvalidType",
                        expected: selfStruct,
                        received: input
                      };
              }), inputVar) + "}");
      return inputVar;
    }),
  sb: noop,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

function min$1(struct, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  var refiner = function (s) {
    return function (value) {
      if (value < minValue) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$1, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, refiner);
}

function max$1(struct, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  var refiner = function (s) {
    return function (value) {
      if (value > maxValue) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$1, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, refiner);
}

function port(struct, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid port";
  var refiner = function (s) {
    return function (value) {
      if (value < 1 || value > 65535) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$1, {
              kind: "Port",
              message: message
            }, refiner);
}

var metadataId$2 = "rescript-struct:Float.refinements";

function refinements$2(struct) {
  var m = struct.m[metadataId$2];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var struct$5 = {
  t: "Float",
  pb: (function (b, selfStruct, inputVar, path) {
      b.c = b.c + ("if(typeof " + inputVar + "!==\"number\"||Number.isNaN(" + inputVar + ")){" + raiseWithArg(b, path, (function (input) {
                return {
                        TAG: "InvalidType",
                        expected: selfStruct,
                        received: input
                      };
              }), inputVar) + "}");
      return inputVar;
    }),
  sb: noop,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

function min$2(struct, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  var refiner = function (s) {
    return function (value) {
      if (value < minValue) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$2, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, refiner);
}

function max$2(struct, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  var refiner = function (s) {
    return function (value) {
      if (value > maxValue) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$2, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, refiner);
}

var metadataId$3 = "rescript-struct:Array.refinements";

function refinements$3(struct) {
  var m = struct.m[metadataId$3];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function factory$5(struct) {
  return {
          t: {
            TAG: "Array",
            _0: struct
          },
          pb: (function (b, selfStruct, inputVar, path) {
              var iteratorVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + ("if(!Array.isArray(" + inputVar + ")){" + raiseWithArg(b, path, (function (input) {
                        return {
                                TAG: "InvalidType",
                                expected: selfStruct,
                                received: input
                              };
                      }), inputVar) + "}" + outputVar + "=[];for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + scope(b, (function (b) {
                        var itemVar = $$var(b);
                        b.c = b.c + (itemVar + "=" + inputVar + "[" + iteratorVar + "];");
                        var itemOutputVar = withPathPrepend(b, path, iteratorVar, (function (b, path) {
                                return run(b, struct.pb, struct, itemVar, path);
                              }));
                        return outputVar + ".push(" + itemOutputVar + ")";
                      })) + "}");
              var isAsync = struct.i;
              if (!isAsync) {
                return outputVar;
              }
              var asyncOutputVar = $$var(b);
              b.c = b.c + (asyncOutputVar + "=()=>Promise.all(" + outputVar + ".map(t=>t()));");
              return asyncOutputVar;
            }),
          sb: (function (b, param, inputVar, path) {
              var iteratorVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "=[];for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + scope(b, (function (b) {
                        var itemVar = $$var(b);
                        b.c = b.c + (itemVar + "=" + inputVar + "[" + iteratorVar + "];");
                        var itemOutputVar = withPathPrepend(b, path, iteratorVar, (function (b, path) {
                                return run(b, struct.sb, struct, itemVar, path);
                              }));
                        return outputVar + ".push(" + itemOutputVar + ")";
                      })) + "}");
              return outputVar;
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function min$3(struct, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or more items long";
  var refiner = function (s) {
    return function (value) {
      if (value.length < length) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$3, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, refiner);
}

function max$3(struct, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or fewer items long";
  var refiner = function (s) {
    return function (value) {
      if (value.length > length) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$3, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, refiner);
}

function length$1(struct, length$2, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be exactly " + length$2 + " items long";
  var refiner = function (s) {
    return function (value) {
      if (value.length !== length$2) {
        return s.fail(message, undefined);
      }
      
    };
  };
  return addRefinement(struct, metadataId$3, {
              kind: {
                TAG: "Length",
                length: length$2
              },
              message: message
            }, refiner);
}

function factory$6(struct) {
  return {
          t: {
            TAG: "Dict",
            _0: struct
          },
          pb: (function (b, selfStruct, inputVar, path) {
              var keyVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              typeRefinement(b, selfStruct, inputVar, path);
              b.c = b.c + (outputVar + "={};for(let " + keyVar + " in " + inputVar + "){" + scope(b, (function (b) {
                        var itemVar = $$var(b);
                        b.c = b.c + (itemVar + "=" + inputVar + "[" + keyVar + "];");
                        var itemOutputVar = withPathPrepend(b, path, keyVar, (function (b, path) {
                                return run(b, struct.pb, struct, itemVar, path);
                              }));
                        return outputVar + "[" + keyVar + "]=" + itemOutputVar;
                      })) + "}");
              var isAsync = struct.i;
              if (!isAsync) {
                return outputVar;
              }
              var resolveVar = varWithoutAllocation(b);
              var rejectVar = varWithoutAllocation(b);
              var asyncParseResultVar = varWithoutAllocation(b);
              var counterVar = varWithoutAllocation(b);
              var asyncOutputVar = $$var(b);
              b.c = b.c + (asyncOutputVar + "=()=>new Promise((" + resolveVar + "," + rejectVar + ")=>{let " + counterVar + "=Object.keys(" + outputVar + ").length;for(let " + keyVar + " in " + outputVar + "){" + outputVar + "[" + keyVar + "]().then(" + asyncParseResultVar + "=>{" + outputVar + "[" + keyVar + "]=" + asyncParseResultVar + ";if(" + counterVar + "--===1){" + resolveVar + "(" + outputVar + ")}}," + rejectVar + ")}});");
              return asyncOutputVar;
            }),
          sb: (function (b, param, inputVar, path) {
              var keyVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "={};for(let " + keyVar + " in " + inputVar + "){" + scope(b, (function (b) {
                        var itemVar = $$var(b);
                        b.c = b.c + (itemVar + "=" + inputVar + "[" + keyVar + "];");
                        var itemOutputVar = withPathPrepend(b, path, keyVar, (function (b, path) {
                                return run(b, struct.sb, struct, itemVar, path);
                              }));
                        return outputVar + "[" + keyVar + "]=" + itemOutputVar;
                      })) + "}");
              return outputVar;
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function factory$7(definer) {
  var structs = [];
  var itemDefinitionsSet = new Set();
  var item = function (idx, struct) {
    var inlinedInputLocation = "\"" + idx + "\"";
    if (structs[idx]) {
      throw new Error("[rescript-struct] " + ("The item " + inlinedInputLocation + " is defined multiple times. If you want to duplicate the item, use S.transform instead."));
    }
    var itemDefinition = {
      s: struct,
      l: inlinedInputLocation,
      p: "[" + inlinedInputLocation + "]",
      r: 0
    };
    structs[idx] = struct;
    itemDefinitionsSet.add(itemDefinition);
    return itemDefinition;
  };
  var tag = function (idx, asValue) {
    item(idx, literal(asValue));
  };
  var ctx = {
    s: structs,
    d: itemDefinitionsSet,
    i: item,
    t: tag
  };
  var definition = definer(ctx);
  var itemDefinitionsSet$1 = itemDefinitionsSet;
  var structs$1 = structs;
  var length = structs$1.length;
  for(var idx = 0; idx < length; ++idx){
    if (!structs$1[idx]) {
      var inlinedInputLocation = "\"" + idx + "\"";
      var itemDefinition = {
        s: unit,
        l: inlinedInputLocation,
        p: "[" + inlinedInputLocation + "]",
        r: 0
      };
      structs$1[idx] = unit;
      itemDefinitionsSet$1.add(itemDefinition);
    }
    
  }
  var itemDefinitions = Array.from(itemDefinitionsSet$1);
  return {
          t: {
            TAG: "Tuple",
            _0: structs$1
          },
          pb: makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet$1, definition, (function (b, selfStruct, inputVar, path) {
                  b.c = b.c + ("if(!Array.isArray(" + inputVar + ")){" + raiseWithArg(b, path, (function (input) {
                            return {
                                    TAG: "InvalidType",
                                    expected: selfStruct,
                                    received: input
                                  };
                          }), inputVar) + "}if(" + inputVar + ".length!==" + length + "){" + raiseWithArg(b, path, (function (numberOfInputItems) {
                            return {
                                    TAG: "InvalidTupleSize",
                                    expected: length,
                                    received: numberOfInputItems
                                  };
                          }), inputVar + ".length") + "}");
                }), (function (_b, param, param$1, param$2) {
                  
                })),
          sb: (function (b, param, inputVar, path) {
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "=[];");
              var prevCode = b.c;
              b.c = "";
              var definitionToOutput = function (definition, outputPath) {
                var kind = toKindWithSet(definition, itemDefinitionsSet$1);
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                      }
                      return ;
                  case 1 :
                      b.c = "if(" + inputVar + outputPath + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                              return {
                                      TAG: "InvalidLiteral",
                                      expected: classify(definition),
                                      received: input
                                    };
                            }), inputVar + outputPath) + "}" + b.c;
                      return ;
                  case 2 :
                      var inputPath = definition.p;
                      var struct = definition.s;
                      var match = definition.r;
                      switch (match) {
                        case 0 :
                        case 1 :
                            break;
                        case 2 :
                            return invalidOperation(b, path, "The item " + definition.l + " is registered multiple times. If you want to duplicate the item, use S.transform instead");
                        
                      }
                      definition.r = 2;
                      if (struct.sb === noop) {
                        b.c = b.c + (outputVar + inputPath + "=" + inputVar + outputPath + ";");
                        return ;
                      }
                      var fieldInputVar = $$var(b);
                      b.c = b.c + (fieldInputVar + "=" + inputVar + outputPath + ";");
                      var fieldOuputVar = run(b, struct.sb, struct, fieldInputVar, path + outputPath);
                      b.c = b.c + (outputVar + inputPath + "=" + fieldOuputVar + ";");
                      return ;
                      break;
                  
                }
              };
              definitionToOutput(definition, "");
              b.c = prevCode + b.c;
              for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                var match = itemDefinitions[idx];
                var registered = match.r;
                if (registered === 0) {
                  var literal = toLiteral(match.s);
                  if (literal !== undefined) {
                    var value$1 = value(literal);
                    b.c = b.c + (outputVar + match.p + "=" + ("e[" + (b.e.push(value$1) - 1) + "]") + ";");
                  } else {
                    invalidOperation(b, path, "Can't create serializer. The " + match.l + " item is not registered and not a literal. Use S.transform instead");
                  }
                }
                
              }
              return outputVar;
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function factory$8(structs) {
  if (structs.length < 2) {
    throw new Error("[rescript-struct] A Union struct factory require at least two structs.");
  }
  return {
          t: {
            TAG: "Union",
            _0: structs
          },
          pb: (function (b, selfStruct, inputVar, path) {
              var structs = selfStruct.t._0;
              var isAsyncRef = false;
              var itemsCode = [];
              var itemsOutputVar = [];
              var prevCode = b.c;
              for(var idx = 0 ,idx_finish = structs.length; idx < idx_finish; ++idx){
                var struct = structs[idx];
                b.c = "";
                var itemOutputVar = run(b, struct.pb, struct, inputVar, "");
                var isAsyncItem = struct.i;
                if (isAsyncItem) {
                  isAsyncRef = true;
                }
                itemsOutputVar.push(itemOutputVar);
                itemsCode.push(b.c);
              }
              b.c = prevCode;
              var isAsync = isAsyncRef;
              var outputVar = $$var(b);
              var codeEndRef = "";
              var errorCodeRef = "";
              for(var idx$1 = 0 ,idx_finish$1 = structs.length; idx$1 < idx_finish$1; ++idx$1){
                var struct$1 = structs[idx$1];
                var code = itemsCode[idx$1];
                var itemOutputVar$1 = itemsOutputVar[idx$1];
                var isAsyncItem$1 = struct$1.i;
                var errorVar = varWithoutAllocation(b);
                var errorCode = isAsync ? (
                    isAsyncItem$1 ? errorVar + "===" + itemOutputVar$1 + "?" + errorVar + "():" : ""
                  ) + ("Promise.reject(" + errorVar + ")") : errorVar;
                errorCodeRef = idx$1 === 0 ? errorCode : errorCodeRef + "," + errorCode;
                b.c = b.c + ("try{" + code + (
                    isAsyncItem$1 ? "throw " + itemOutputVar$1 : (
                        isAsync ? outputVar + "=()=>Promise.resolve(" + itemOutputVar$1 + ")" : outputVar + "=" + itemOutputVar$1
                      )
                  ) + "}catch(" + errorVar + "){if(" + (errorVar + "&&" + errorVar + ".s===s") + (
                    isAsyncItem$1 ? "||" + errorVar + "===" + itemOutputVar$1 : ""
                  ) + "){");
                codeEndRef = "}else{throw " + errorVar + "}}" + codeEndRef;
              }
              if (isAsync) {
                b.c = b.c + (outputVar + "=()=>Promise.any([" + errorCodeRef + "]).catch(t=>{" + raiseWithArg(b, path, (function (internalErrors) {
                          return {
                                  TAG: "InvalidUnion",
                                  _0: internalErrors.map(toParseError)
                                };
                        }), "t.errors") + "})") + codeEndRef;
                return outputVar;
              } else {
                b.c = b.c + raiseWithArg(b, path, (function (internalErrors) {
                        return {
                                TAG: "InvalidUnion",
                                _0: internalErrors.map(toParseError)
                              };
                      }), "[" + errorCodeRef + "]") + codeEndRef;
                return outputVar;
              }
            }),
          sb: (function (b, selfStruct, inputVar, path) {
              var structs = selfStruct.t._0;
              var outputVar = $$var(b);
              var codeEndRef = "";
              var errorVarsRef = "";
              for(var idx = 0 ,idx_finish = structs.length; idx < idx_finish; ++idx){
                var itemStruct = structs[idx];
                var errorVar = varWithoutAllocation(b);
                errorVarsRef = errorVarsRef + errorVar + ",";
                b.c = b.c + ("try{" + scope(b, (function(itemStruct){
                      return function (b) {
                        return outputVar + "=" + run(b, itemStruct.sb, itemStruct, inputVar, "");
                      }
                      }(itemStruct))) + "}catch(" + errorVar + "){if(" + (errorVar + "&&" + errorVar + ".s===s") + "){");
                codeEndRef = "}else{throw " + errorVar + "}}" + codeEndRef;
              }
              b.c = b.c + raiseWithArg(b, path, (function (internalErrors) {
                      return {
                              TAG: "InvalidUnion",
                              _0: internalErrors.map(toSerializeError)
                            };
                    }), "[" + errorVarsRef + "]") + codeEndRef;
              return outputVar;
            }),
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: empty
        };
}

function list(struct) {
  return transform$1(factory$5(struct), (function (param) {
                return {
                        p: Belt_List.fromArray,
                        s: Belt_List.toArray
                      };
              }));
}

var json = {
  t: "JSON",
  pb: (function (b, selfStruct, inputVar, path) {
      var parse = function (input, pathOpt) {
        var path$1 = pathOpt !== undefined ? pathOpt : path;
        var match = typeof input;
        if (match === "string" || match === "boolean") {
          return input;
        }
        if (match === "object") {
          if (input === null) {
            return input;
          }
          if (Array.isArray(input)) {
            var output = [];
            for(var idx = 0 ,idx_finish = input.length; idx < idx_finish; ++idx){
              var inputItem = input[idx];
              var $$location = idx.toString();
              output.push(parse(inputItem, path$1 + ("[" + JSON.stringify($$location) + "]")));
            }
            return output;
          }
          var keys = Object.keys(input);
          var output$1 = {};
          for(var idx$1 = 0 ,idx_finish$1 = keys.length; idx$1 < idx_finish$1; ++idx$1){
            var key = keys[idx$1];
            var field = input[key];
            output$1[key] = parse(field, path$1 + ("[" + JSON.stringify(key) + "]"));
          }
          return output$1;
        }
        if (match === "number") {
          if (!Number.isNaN(input)) {
            return input;
          }
          throw {
                c: {
                  TAG: "InvalidType",
                  expected: selfStruct,
                  received: input
                },
                p: path$1,
                s: symbol
              };
        }
        throw {
              c: {
                TAG: "InvalidType",
                expected: selfStruct,
                received: input
              },
              p: path$1,
              s: symbol
            };
      };
      return "e[" + (b.e.push(parse) - 1) + "](" + inputVar + ")";
    }),
  sb: noop,
  i: 0,
  s: initialSerialize,
  j: initialSerializeToJson,
  p: intitialParse,
  a: intitialParseAsync,
  m: empty
};

function $$catch(struct, getFallbackValue) {
  return {
          t: struct.t,
          pb: (function (b, selfStruct, inputVar, path) {
              return withCatch(b, (function (b, errorVar) {
                            return "e[" + (b.e.push(function (input, internalError) {
                                          return getFallbackValue({
                                                      e: toParseError(internalError),
                                                      i: input,
                                                      s: selfStruct,
                                                      f: (function (message, customPathOpt) {
                                                          var customPath = customPathOpt !== undefined ? customPathOpt : "";
                                                          throw {
                                                                c: {
                                                                  TAG: "OperationFailed",
                                                                  _0: message
                                                                },
                                                                p: path + customPath,
                                                                s: symbol
                                                              };
                                                        }),
                                                      w: (function (error) {
                                                          throw {
                                                                c: error.code,
                                                                p: path + error.path,
                                                                s: symbol
                                                              };
                                                        })
                                                    });
                                        }) - 1) + "](" + inputVar + "," + errorVar + ")";
                          }), (function (b) {
                            return run(b, struct.pb, struct, inputVar, path);
                          }));
            }),
          sb: struct.sb,
          i: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          m: struct.m
        };
}

var deprecationMetadataId = "rescript-struct:deprecation";

function deprecate(struct, message) {
  return set$1(struct, deprecationMetadataId, message);
}

function deprecation(struct) {
  return struct.m[deprecationMetadataId];
}

var descriptionMetadataId = "rescript-struct:description";

function describe(struct, description) {
  return set$1(struct, descriptionMetadataId, description);
}

function description(struct) {
  return struct.m[descriptionMetadataId];
}

function toReason(nestedLevelOpt, error) {
  var nestedLevel = nestedLevelOpt !== undefined ? nestedLevelOpt : 0;
  var reason = error.code;
  if (typeof reason !== "object") {
    return "Encountered unexpected asynchronous transform or refine. Use S.parseAsyncWith instead of S.parseWith";
  }
  switch (reason.TAG) {
    case "OperationFailed" :
        return reason._0;
    case "InvalidOperation" :
        return reason.description;
    case "InvalidType" :
        return "Expected " + name(reason.expected) + ", received " + toText(classify(reason.received));
    case "InvalidLiteral" :
        return "Expected " + toText(reason.expected) + ", received " + toText(classify(reason.received));
    case "InvalidTupleSize" :
        return "Expected Tuple with " + reason.expected + " items, received " + reason.received;
    case "ExcessField" :
        return "Encountered disallowed excess key " + JSON.stringify(reason._0) + " on an object. Use Deprecated to ignore a specific field, or S.Object.strip to ignore excess keys completely";
    case "InvalidUnion" :
        var lineBreak = "\n" + " ".repeat((nestedLevel << 1));
        var array = reason._0.map(function (error) {
              var reason = toReason(nestedLevel + 1, error);
              var nonEmptyPath = error.path;
              var $$location = nonEmptyPath === "" ? "" : "Failed at " + nonEmptyPath + ". ";
              return "- " + $$location + reason;
            });
        var reasons = Array.from(new Set(array));
        return "Invalid union with following errors" + lineBreak + reasons.join(lineBreak);
    case "InvalidJsonStruct" :
        return "The struct " + name(reason._0) + " is not compatible with JSON";
    
  }
}

function toString(error) {
  var match = error.operation;
  var operation;
  operation = match === "Serializing" ? "serializing" : "parsing";
  var reason = toReason(undefined, error);
  var nonEmptyPath = error.path;
  var pathText = nonEmptyPath === "" ? "root" : nonEmptyPath;
  return "Failed " + operation + " at " + pathText + ". Reason: " + reason;
}

function getExn(result) {
  if (result.TAG === "Ok") {
    return result._0;
  }
  var message = toString(result._0);
  throw new Error("[rescript-struct] " + message);
}

function mapErrorToString(result) {
  if (result.TAG === "Ok") {
    return result;
  } else {
    return {
            TAG: "Error",
            _0: toString(result._0)
          };
  }
}

var Result = {
  getExn: getExn,
  mapErrorToString: mapErrorToString
};

function internalInline(struct, maybeVariant, param) {
  var metadataMap = Object.assign({}, struct.m);
  var taggedLiteral = struct.t;
  var inlinedStruct;
  if (typeof taggedLiteral !== "object") {
    switch (taggedLiteral) {
      case "Never" :
          inlinedStruct = "S.never";
          break;
      case "Unknown" :
          inlinedStruct = "S.unknown";
          break;
      case "String" :
          inlinedStruct = "S.string";
          break;
      case "Int" :
          inlinedStruct = "S.int";
          break;
      case "Float" :
          inlinedStruct = "S.float";
          break;
      case "Bool" :
          inlinedStruct = "S.bool";
          break;
      case "JSON" :
          inlinedStruct = "S.json";
          break;
      
    }
  } else {
    switch (taggedLiteral.TAG) {
      case "Literal" :
          var taggedLiteral$1 = taggedLiteral._0;
          var inlinedLiteral;
          if (typeof taggedLiteral$1 !== "object") {
            switch (taggedLiteral$1) {
              case "Null" :
                  inlinedLiteral = "EmptyNull";
                  break;
              case "Undefined" :
                  inlinedLiteral = "Undefined";
                  break;
              case "NaN" :
                  inlinedLiteral = "NaN";
                  break;
              
            }
          } else {
            switch (taggedLiteral$1.TAG) {
              case "String" :
                  inlinedLiteral = "String(" + JSON.stringify(taggedLiteral$1._0) + ")";
                  break;
              case "Number" :
                  var $$float = taggedLiteral$1._0;
                  inlinedLiteral = "Number(" + ($$float.toString() + (
                      $$float % 1 === 0 ? "." : ""
                    )) + ")";
                  break;
              case "Boolean" :
                  inlinedLiteral = "Bool(" + taggedLiteral$1._0 + ")";
                  break;
              default:
                inlinedLiteral = "NaN";
            }
          }
          inlinedStruct = maybeVariant !== undefined ? "S.literalVariant(" + inlinedLiteral + ", " + maybeVariant + ")" : "S.literal(" + inlinedLiteral + ")";
          break;
      case "Option" :
          var struct$1 = taggedLiteral._0;
          var internalInlinedStruct = internalInline(struct$1, undefined, undefined);
          var $$default = struct$1.m[defaultMetadataId];
          if ($$default !== undefined) {
            Js_dict.unsafeDeleteKey(metadataMap, defaultMetadataId);
            var any;
            any = $$default.TAG === "Value" ? $$default._0 : $$default._0(undefined);
            inlinedStruct = internalInlinedStruct + ("->S.Option.getOrWith(() => %raw(\`" + (
                any === (void 0) ? "undefined" : JSON.stringify(any)
              ) + "\`))");
          } else {
            inlinedStruct = "S.option(" + internalInlinedStruct + ")";
          }
          break;
      case "Null" :
          inlinedStruct = "S.null(" + internalInline(taggedLiteral._0, undefined, undefined) + ")";
          break;
      case "Array" :
          inlinedStruct = "S.array(" + internalInline(taggedLiteral._0, undefined, undefined) + ")";
          break;
      case "Object" :
          var fieldNames = taggedLiteral.fieldNames;
          var fields = taggedLiteral.fields;
          inlinedStruct = fieldNames.length !== 0 ? "S.object(s =>\n  {\n    " + fieldNames.map(function (fieldName) {
                    return JSON.stringify(fieldName) + ": s.field(" + JSON.stringify(fieldName) + ", " + internalInline(fields[fieldName], undefined, undefined) + ")";
                  }).join(",\n    ") + ",\n  }\n)" : "S.object(_ => ())";
          break;
      case "Tuple" :
          var tupleStructs = taggedLiteral._0;
          if (tupleStructs.length !== 0) {
            var numberOfItems = tupleStructs.length;
            if (numberOfItems > 10) {
              throw new Error("[rescript-struct] The S.inline doesn't support tuples with more than 10 items.");
            }
            inlinedStruct = "S.tuple" + numberOfItems + "(. " + tupleStructs.map(function (s) {
                    return internalInline(s, undefined, undefined);
                  }).join(", ") + ")";
          } else {
            inlinedStruct = "S.tuple0(.)";
          }
          break;
      case "Union" :
          var variantNamesCounter = {};
          inlinedStruct = "S.union([" + taggedLiteral._0.map(function (s) {
                  var variantName = name(s);
                  var n = Js_dict.get(variantNamesCounter, variantName);
                  var numberOfVariantNames = n !== undefined ? n : 0;
                  variantNamesCounter[variantName] = numberOfVariantNames + 1;
                  var variantName$1 = numberOfVariantNames !== 0 ? variantName + (numberOfVariantNames + 1) : variantName;
                  var inlinedVariant = "#" + JSON.stringify(variantName$1);
                  return internalInline(s, inlinedVariant, undefined);
                }).join(", ") + "])";
          break;
      case "Dict" :
          inlinedStruct = "S.dict(" + internalInline(taggedLiteral._0, undefined, undefined) + ")";
          break;
      
    }
  }
  var message = deprecation(struct);
  var inlinedStruct$1 = message !== undefined ? (Js_dict.unsafeDeleteKey(metadataMap, deprecationMetadataId), inlinedStruct + ("->S.deprecate(" + JSON.stringify(message) + ")")) : inlinedStruct;
  var message$1 = description(struct);
  var inlinedStruct$2 = message$1 !== undefined ? (Js_dict.unsafeDeleteKey(metadataMap, descriptionMetadataId), inlinedStruct$1 + ("->S.describe(" + (
          message$1 === (void 0) ? "undefined" : JSON.stringify(message$1)
        ) + ")")) : inlinedStruct$1;
  var match = struct.t;
  var inlinedStruct$3;
  inlinedStruct$3 = typeof match !== "object" || !(match.TAG === "Object" && match.unknownKeys !== "Strip") ? inlinedStruct$2 : inlinedStruct$2 + "->S.Object.strict";
  var match$1 = struct.t;
  var inlinedStruct$4;
  var exit = 0;
  if (typeof match$1 !== "object") {
    switch (match$1) {
      case "String" :
          exit = 1;
          break;
      case "Int" :
          var refinements$4 = refinements$1(struct);
          if (refinements$4.length !== 0) {
            Js_dict.unsafeDeleteKey(metadataMap, metadataId$1);
            inlinedStruct$4 = inlinedStruct$3 + refinements$4.map(function (refinement) {
                    var match = refinement.kind;
                    if (typeof match !== "object") {
                      return "->S.Int.port(~message=" + JSON.stringify(refinement.message) + ", ())";
                    } else if (match.TAG === "Min") {
                      return "->S.Int.min(~message=" + JSON.stringify(refinement.message) + ", " + match.value + ")";
                    } else {
                      return "->S.Int.max(~message=" + JSON.stringify(refinement.message) + ", " + match.value + ")";
                    }
                  }).join("");
          } else {
            inlinedStruct$4 = inlinedStruct$3;
          }
          break;
      case "Float" :
          var refinements$5 = refinements$2(struct);
          if (refinements$5.length !== 0) {
            Js_dict.unsafeDeleteKey(metadataMap, metadataId$2);
            inlinedStruct$4 = inlinedStruct$3 + refinements$5.map(function (refinement) {
                    var match = refinement.kind;
                    if (match.TAG === "Min") {
                      var value = match.value;
                      return "->S.Float.min(~message=" + JSON.stringify(refinement.message) + ", " + (value.toString() + (
                                value % 1 === 0 ? "." : ""
                              )) + ")";
                    }
                    var value$1 = match.value;
                    return "->S.Float.max(~message=" + JSON.stringify(refinement.message) + ", " + (value$1.toString() + (
                              value$1 % 1 === 0 ? "." : ""
                            )) + ")";
                  }).join("");
          } else {
            inlinedStruct$4 = inlinedStruct$3;
          }
          break;
      default:
        inlinedStruct$4 = inlinedStruct$3;
    }
  } else {
    switch (match$1.TAG) {
      case "Literal" :
          var tmp = match$1._0;
          if (typeof tmp !== "object" || tmp.TAG !== "String") {
            inlinedStruct$4 = inlinedStruct$3;
          } else {
            exit = 1;
          }
          break;
      case "Array" :
          var refinements$6 = refinements$3(struct);
          if (refinements$6.length !== 0) {
            Js_dict.unsafeDeleteKey(metadataMap, metadataId$3);
            inlinedStruct$4 = inlinedStruct$3 + refinements$6.map(function (refinement) {
                    var match = refinement.kind;
                    switch (match.TAG) {
                      case "Min" :
                          return "->S.Array.min(~message=" + JSON.stringify(refinement.message) + ", " + match.length + ")";
                      case "Max" :
                          return "->S.Array.max(~message=" + JSON.stringify(refinement.message) + ", " + match.length + ")";
                      case "Length" :
                          return "->S.Array.length(~message=" + JSON.stringify(refinement.message) + ", " + match.length + ")";
                      
                    }
                  }).join("");
          } else {
            inlinedStruct$4 = inlinedStruct$3;
          }
          break;
      default:
        inlinedStruct$4 = inlinedStruct$3;
    }
  }
  if (exit === 1) {
    var refinements$7 = refinements(struct);
    if (refinements$7.length !== 0) {
      Js_dict.unsafeDeleteKey(metadataMap, metadataId);
      inlinedStruct$4 = inlinedStruct$3 + refinements$7.map(function (refinement) {
              var match = refinement.kind;
              if (typeof match !== "object") {
                switch (match) {
                  case "Email" :
                      return "->S.String.email(~message=" + JSON.stringify(refinement.message) + ", ())";
                  case "Uuid" :
                      return "->S.String.uuid(~message=" + JSON.stringify(refinement.message) + ", ())";
                  case "Cuid" :
                      return "->S.String.cuid(~message=" + JSON.stringify(refinement.message) + ", ())";
                  case "Url" :
                      return "->S.String.url(~message=" + JSON.stringify(refinement.message) + ", ())";
                  case "Datetime" :
                      return "->S.String.datetime(~message=" + JSON.stringify(refinement.message) + ", ())";
                  
                }
              } else {
                switch (match.TAG) {
                  case "Min" :
                      return "->S.String.min(~message=" + JSON.stringify(refinement.message) + ", " + match.length + ")";
                  case "Max" :
                      return "->S.String.max(~message=" + JSON.stringify(refinement.message) + ", " + match.length + ")";
                  case "Length" :
                      return "->S.String.length(~message=" + JSON.stringify(refinement.message) + ", " + match.length + ")";
                  case "Pattern" :
                      return "->S.String.pattern(~message=" + JSON.stringify(refinement.message) + ", %re(" + JSON.stringify(match.re.toString()) + "))";
                  
                }
              }
            }).join("");
    } else {
      inlinedStruct$4 = inlinedStruct$3;
    }
  }
  var inlinedStruct$5 = Object.keys(metadataMap).length !== 0 ? "{\n  let s = " + inlinedStruct$4 + "\n  let _ = %raw(\`s.m = " + JSON.stringify(metadataMap) + "\`)\n  s\n}" : inlinedStruct$4;
  var match$2 = struct.t;
  if (typeof match$2 === "object" && match$2.TAG === "Literal") {
    return inlinedStruct$5;
  }
  if (maybeVariant !== undefined) {
    return inlinedStruct$5 + ("->S.variant(v => " + maybeVariant + "(v))");
  } else {
    return inlinedStruct$5;
  }
}

function inline(struct) {
  if (false) {
    var v = (void 0);
    if (v !== undefined) {
      Caml_option.valFromOption(v);
    }
    
  }
  return internalInline(struct, undefined, undefined);
}

function tuple1(v0) {
  return factory$7(function (s) {
              return s.i(0, v0);
            });
}

function tuple2(v0, v1) {
  return factory$7(function (s) {
              return [
                      s.i(0, v0),
                      s.i(1, v1)
                    ];
            });
}

function tuple3(v0, v1, v2) {
  return factory$7(function (s) {
              return [
                      s.i(0, v0),
                      s.i(1, v1),
                      s.i(2, v2)
                    ];
            });
}

var Path = {
  empty: "",
  dynamic: "[]",
  toArray: toArray,
  fromArray: fromArray,
  fromLocation: fromLocation,
  concat: concat
};

var $$Error$1 = {
  toString: toString
};

var never = struct;

var unknown = struct$1;

var string = struct$2;

var bool = struct$3;

var $$int = struct$4;

var $$float = struct$5;

var array = factory$5;

var dict = factory$6;

var option = factory$1;

var $$null = factory$2;

var jsonString = factory$4;

var union = factory$8;

var variant = factory;

var parseWith = parseAnyWith;

var parseOrRaiseWith = parseAnyOrRaiseWith;

var parseAsyncWith = parseAnyAsyncWith;

var parseAsyncInStepsWith = parseAnyAsyncInStepsWith;

var $$Object = {
  factory: factory$3,
  strip: strip,
  strict: strict
};

var object = factory$3;

var Tuple = {};

var tuple = factory$7;

var $$Option = {
  $$default: $$default,
  getOr: getOr,
  getOrWith: getOrWith
};

var String_Refinement = {};

var $$String = {
  Refinement: String_Refinement,
  refinements: refinements,
  min: min,
  max: max,
  length: length,
  email: email,
  uuid: uuid,
  cuid: cuid,
  url: url,
  pattern: pattern,
  datetime: datetime,
  trim: trim
};

var Int_Refinement = {};

var Int = {
  Refinement: Int_Refinement,
  refinements: refinements$1,
  min: min$1,
  max: max$1,
  port: port
};

var Float_Refinement = {};

var Float = {
  Refinement: Float_Refinement,
  refinements: refinements$2,
  min: min$2,
  max: max$2
};

var Array_Refinement = {};

var $$Array = {
  Refinement: Array_Refinement,
  refinements: refinements$3,
  min: min$3,
  max: max$3,
  length: length$1
};

var Metadata = {
  Id: Id,
  get: get,
  set: set$1
};

export {
  Literal ,
  Path ,
  $$Error$1 as $$Error,
  Raised ,
  never ,
  unknown ,
  unit ,
  string ,
  bool ,
  $$int ,
  $$float ,
  json ,
  literal ,
  array ,
  list ,
  dict ,
  option ,
  $$null ,
  jsonString ,
  union ,
  $$catch ,
  describe ,
  description ,
  deprecate ,
  deprecation ,
  transform$1 as transform,
  preprocess ,
  custom ,
  refine ,
  variant ,
  parseWith ,
  parseAnyWith ,
  parseJsonStringWith ,
  parseOrRaiseWith ,
  parseAnyOrRaiseWith ,
  parseAsyncWith ,
  parseAnyAsyncWith ,
  parseAsyncInStepsWith ,
  parseAnyAsyncInStepsWith ,
  serializeWith ,
  serializeToUnknownWith ,
  serializeToJsonStringWith ,
  serializeOrRaiseWith ,
  serializeToUnknownOrRaiseWith ,
  isAsyncParse ,
  recursive ,
  classify$1 as classify,
  name ,
  setName ,
  $$Object ,
  object ,
  Tuple ,
  tuple ,
  tuple1 ,
  tuple2 ,
  tuple3 ,
  $$Option ,
  $$String ,
  Int ,
  Float ,
  $$Array ,
  Result ,
  Metadata ,
  inline ,
}
/* symbol Not a pure module */
