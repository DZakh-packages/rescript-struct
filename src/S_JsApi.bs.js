// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var S$ReScriptStruct = require("./S.bs.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

class ReScriptStructError extends Error {
      constructor(message) {
        super(message);
        this.name = "ReScriptStructError";
      }
    }
    exports.ReScriptStructError = ReScriptStructError
;

function fromOk(value) {
  return {
          success: true,
          value: value
        };
}

function fromError(error) {
  return {
          success: false,
          error: error
        };
}

var structOperations = {};

function parse(data) {
  var struct = this;
  try {
    return fromOk(S$ReScriptStruct.parseOrRaiseWith(data, struct));
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === S$ReScriptStruct.Raised) {
      return fromError(new ReScriptStructError(S$ReScriptStruct.$$Error.toString(error._1)));
    }
    throw error;
  }
}

function parseOrThrow(data) {
  var struct = this;
  try {
    return S$ReScriptStruct.parseOrRaiseWith(data, struct);
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === S$ReScriptStruct.Raised) {
      throw new ReScriptStructError(S$ReScriptStruct.$$Error.toString(error._1));
    }
    throw error;
  }
}

function parseAsync(data) {
  var struct = this;
  return S$ReScriptStruct.parseAsyncWith(data, struct).then(function (result) {
              if (result.TAG === /* Ok */0) {
                return fromOk(result._0);
              } else {
                return fromError(new ReScriptStructError(S$ReScriptStruct.$$Error.toString(result._0)));
              }
            });
}

function serialize(value) {
  var struct = this;
  try {
    return fromOk(S$ReScriptStruct.serializeOrRaiseWith(value, struct));
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === S$ReScriptStruct.Raised) {
      return fromError(new ReScriptStructError(S$ReScriptStruct.$$Error.toString(error._1)));
    }
    throw error;
  }
}

function serializeOrThrow(value) {
  var struct = this;
  try {
    return S$ReScriptStruct.serializeOrRaiseWith(value, struct);
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === S$ReScriptStruct.Raised) {
      throw new ReScriptStructError(S$ReScriptStruct.$$Error.toString(error._1));
    }
    throw error;
  }
}

function transform(parser, serializer) {
  var struct = this;
  var struct$1 = S$ReScriptStruct.transform(struct, parser, serializer, undefined);
  return Object.assign(struct$1, structOperations);
}

function refine(parser, serializer) {
  var struct = this;
  var struct$1 = S$ReScriptStruct.refine(struct, parser, serializer, undefined);
  return Object.assign(struct$1, structOperations);
}

function asyncRefine(parser) {
  var struct = this;
  var struct$1 = S$ReScriptStruct.asyncRefine(struct, parser, undefined);
  return Object.assign(struct$1, structOperations);
}

function string(param) {
  var struct = S$ReScriptStruct.string(undefined);
  return Object.assign(struct, structOperations);
}

function $$boolean(param) {
  var struct = S$ReScriptStruct.bool(undefined);
  return Object.assign(struct, structOperations);
}

function integer(param) {
  var struct = S$ReScriptStruct.$$int(undefined);
  return Object.assign(struct, structOperations);
}

function number(param) {
  var struct = S$ReScriptStruct.$$float(undefined);
  return Object.assign(struct, structOperations);
}

function never(param) {
  var struct = S$ReScriptStruct.never(undefined);
  return Object.assign(struct, structOperations);
}

function unknown(param) {
  var struct = S$ReScriptStruct.unknown(undefined);
  return Object.assign(struct, structOperations);
}

function optional(struct) {
  var struct$1 = S$ReScriptStruct.option(struct);
  return Object.assign(struct$1, structOperations);
}

function nullable(struct) {
  var struct$1 = S$ReScriptStruct.$$null(struct);
  return Object.assign(struct$1, structOperations);
}

function array(struct) {
  var struct$1 = S$ReScriptStruct.array(struct);
  return Object.assign(struct$1, structOperations);
}

function record(struct) {
  var struct$1 = S$ReScriptStruct.dict(struct);
  return Object.assign(struct$1, structOperations);
}

function json(struct) {
  var struct$1 = S$ReScriptStruct.json(struct);
  return Object.assign(struct$1, structOperations);
}

function union(structs) {
  var struct = S$ReScriptStruct.union(structs);
  return Object.assign(struct, structOperations);
}

function defaulted(struct, value) {
  var struct$1 = S$ReScriptStruct.defaulted(struct, value);
  return Object.assign(struct$1, structOperations);
}

function tuple(structs) {
  var struct = S$ReScriptStruct.Tuple.factory(...structs);
  return Object.assign(struct, structOperations);
}

function literal(value) {
  var taggedLiteral = typeof value === "string" ? ({
        TAG: /* String */0,
        _0: value
      }) : (
      typeof value === "boolean" ? ({
            TAG: /* Bool */3,
            _0: value
          }) : (
          typeof value === "number" ? (
              Number.isNaN(value) ? Js_exn.raiseError("[rescript-struct] Failed to create a NaN literal struct. Use S.nan instead.") : ({
                    TAG: /* Float */2,
                    _0: value
                  })
            ) : (
              value === null ? /* EmptyNull */0 : (
                  value === undefined ? /* EmptyOption */1 : Js_exn.raiseError("[rescript-struct] The value provided to literal struct factory is not supported.")
                )
            )
        )
    );
  var struct = S$ReScriptStruct.literal(taggedLiteral);
  return Object.assign(struct, structOperations);
}

function nan(param) {
  var struct = S$ReScriptStruct.literal(/* NaN */2);
  return Object.assign(struct, structOperations);
}

function custom(name, parser, serializer) {
  var struct = S$ReScriptStruct.custom(name, parser, serializer, undefined);
  return Object.assign(struct, structOperations);
}

Object.assign(structOperations, {
      parse: parse,
      parseOrThrow: parseOrThrow,
      parseAsync: parseAsync,
      serialize: serialize,
      serializeOrThrow: serializeOrThrow,
      transform: transform,
      refine: refine,
      asyncRefine: asyncRefine,
      optional: (function (param) {
          return optional(this);
        }),
      nullable: (function (param) {
          return nullable(this);
        })
    });

var objectStructOperations = {};

function strict(param) {
  var struct = this;
  var struct$1 = S$ReScriptStruct.$$Object.strict(struct);
  return Object.assign(struct$1, objectStructOperations);
}

function strip(param) {
  var struct = this;
  var struct$1 = S$ReScriptStruct.$$Object.strip(struct);
  return Object.assign(struct$1, objectStructOperations);
}

function factory(definer) {
  var struct = S$ReScriptStruct.object(function (o) {
        var definition = {};
        var fieldNames = Object.keys(definer);
        for(var idx = 0 ,idx_finish = fieldNames.length; idx < idx_finish; ++idx){
          var fieldName = fieldNames[idx];
          var struct = definer[fieldName];
          definition[fieldName] = S$ReScriptStruct.field(o, fieldName, struct);
        }
        return definition;
      });
  return Object.assign(struct, objectStructOperations);
}

Object.assign(objectStructOperations, structOperations);

Object.assign(objectStructOperations, {
      strict: strict,
      strip: strip
    });

var $$Error = {};

var Result = {};

var $$Object = {
  factory: factory
};

exports.$$Error = $$Error;
exports.Result = Result;
exports.string = string;
exports.$$boolean = $$boolean;
exports.integer = integer;
exports.number = number;
exports.never = never;
exports.unknown = unknown;
exports.optional = optional;
exports.nullable = nullable;
exports.array = array;
exports.record = record;
exports.json = json;
exports.union = union;
exports.literal = literal;
exports.nan = nan;
exports.defaulted = defaulted;
exports.tuple = tuple;
exports.custom = custom;
exports.$$Object = $$Object;
/*  Not a pure module */
