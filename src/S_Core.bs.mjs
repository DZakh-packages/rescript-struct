// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function fromString(string) {
  return JSON.stringify(string);
}

function toArray(path) {
  if (path === "") {
    return [];
  } else {
    return JSON.parse(path.split("\"][\"").join("\",\""));
  }
}

function fromLocation($$location) {
  return "[" + JSON.stringify($$location) + "]";
}

function fromArray(array) {
  var len = array.length;
  if (len !== 1) {
    if (len !== 0) {
      return "[" + array.map(fromString).join("][") + "]";
    } else {
      return "";
    }
  }
  var $$location = array[0];
  return "[" + JSON.stringify($$location) + "]";
}

function concat(path, concatedPath) {
  return path + concatedPath;
}

var symbol = Symbol("rescript-schema");

var Raised = /* @__PURE__ */Caml_exceptions.create("S_Core-RescriptSchema.Raised");

class RescriptSchemaError extends Error {
      constructor(code, operation, path) {
        super();
        this.operation = operation;
        this.code = code;
        this.path = path;
        this.s = symbol;
        this.RE_EXN_ID = Raised;
        this._1 = this;
        this.Error = this;
        this.name = "RescriptSchemaError";
      }
      get message() {
        return message(this);
      }
      get reason() {
        return reason(this);
      }
    }
;

function getOrRethrow(exn) {
  if ((exn&&exn.s===symbol)) {
    return exn;
  }
  throw (exn&&exn.RE_EXN_ID==='JsError') ? exn._1 : exn;
}

function prependLocationOrRethrow(exn, $$location) {
  var error = getOrRethrow(exn);
  var path = "[" + JSON.stringify($$location) + "]" + error.path;
  throw new RescriptSchemaError(error.code, error.operation, path);
}

function make(selfSchema, path, operation) {
  return {
          schema: selfSchema,
          fail: (function (message, customPathOpt) {
              var customPath = customPathOpt !== undefined ? customPathOpt : "";
              throw new RescriptSchemaError({
                        TAG: "OperationFailed",
                        _0: message
                      }, operation, path + customPath);
            })
        };
}

function classify(schema) {
  return schema.t;
}

function scope(b) {
  return {
          c: "",
          o: b.o,
          v: b.v,
          l: "",
          a: false,
          p: b,
          e: b.e
        };
}

function allocateScope(b) {
  var varsAllocation = b.l;
  b.a = true;
  b.p.v = b.v;
  if (varsAllocation === "") {
    return b.c;
  } else {
    return "let " + varsAllocation + ";" + b.c;
  }
}

function varWithoutAllocation(b) {
  var newCounter = b.v + 1;
  b.v = newCounter;
  return "v" + newCounter;
}

function allocateVal(b) {
  return {
          s: b,
          a: false
        };
}

function val(b, initial) {
  return {
          i: initial,
          s: b,
          a: false
        };
}

function asyncVal(b, initial) {
  return {
          i: initial,
          s: b,
          a: true
        };
}

function inline(_b, val) {
  var $$var = val.v;
  if ($$var !== undefined) {
    return $$var;
  } else {
    return val.i;
  }
}

function $$var(b, val) {
  var _var = val.v;
  if (_var !== undefined) {
    return _var;
  }
  var $$var$1 = varWithoutAllocation(b);
  var isValScopeActive = !val.s.a;
  var activeScope = isValScopeActive ? val.s : b;
  var i = val.i;
  var allocation = i !== undefined && isValScopeActive ? $$var$1 + "=" + i : $$var$1;
  var varsAllocation = activeScope.l;
  activeScope.l = varsAllocation === "" ? allocation : varsAllocation + "," + allocation;
  var i$1 = val.i;
  if (i$1 !== undefined && !isValScopeActive) {
    b.c = b.c + ($$var$1 + "=" + i$1 + ";");
  }
  val.v = $$var$1;
  return $$var$1;
}

function push(b, input, val) {
  return $$var(b, input) + ".push(" + inline(b, val) + ")";
}

function addKey(b, input, key, val) {
  return $$var(b, input) + "[" + key + "]=" + inline(b, val);
}

function set(b, input, val) {
  if (input === val) {
    return "";
  }
  var match = input.a;
  if (match) {
    var match$1 = val.a;
    if (!match$1) {
      return $$var(b, input) + "=()=>Promise.resolve(" + inline(b, val) + ")";
    }
    
  } else {
    var match$2 = val.a;
    if (match$2) {
      input.a = true;
      return $$var(b, input) + "=" + inline(b, val);
    }
    
  }
  return $$var(b, input) + "=" + inline(b, val);
}

function setInlined(b, input, inlined) {
  return $$var(b, input) + "=" + inlined;
}

function map(b, inlinedFn, input) {
  return val(b, inlinedFn + "(" + inline(b, input) + ")");
}

function transform(b, input, operation) {
  if (!input.a) {
    return operation(b, input);
  }
  var bb = scope(b);
  var operationInput = {
    v: varWithoutAllocation(bb),
    s: bb,
    a: false
  };
  var operationOutputVal = operation(bb, operationInput);
  var operationCode = allocateScope(bb);
  return asyncVal(b, "()=>" + $$var(b, input) + "().then(" + $$var(b, operationInput) + "=>{" + operationCode + "return " + (
              operationOutputVal.a ? "(" + inline(b, operationOutputVal) + ")()" : inline(b, operationOutputVal)
            ) + "})");
}

function embedSyncOperation(b, input, fn) {
  return transform(b, input, (function (b, input) {
                return map(b, "e[" + (b.e.push(fn) - 1) + "]", input);
              }));
}

function embedAsyncOperation(b, input, fn) {
  return transform(b, input, (function (b, input) {
                var val = map(b, "e[" + (b.e.push(fn) - 1) + "]", input);
                val.a = true;
                return val;
              }));
}

function raiseWithArg(b, path, fn, arg) {
  return "e[" + (b.e.push(function (arg) {
                var code = fn(arg);
                throw new RescriptSchemaError(code, b.o, path);
              }) - 1) + "](" + arg + ")";
}

function fail(b, message, path) {
  return "e[" + (b.e.push(function () {
                throw new RescriptSchemaError({
                          TAG: "OperationFailed",
                          _0: message
                        }, b.o, path);
              }) - 1) + "]()";
}

function invalidOperation(b, path, description) {
  throw new RescriptSchemaError({
            TAG: "InvalidOperation",
            description: description
          }, b.o, path);
}

function withCatch(b, input, $$catch, fn) {
  var prevCode = b.c;
  b.c = "";
  var errorVar = varWithoutAllocation(b);
  var maybeResolveVal = $$catch(b, errorVar);
  var catchCode = "if(" + (errorVar + "&&" + errorVar + ".s===s") + "){" + b.c;
  b.c = "";
  var bb = scope(b);
  var fnOutput = fn(bb);
  b.c = b.c + allocateScope(bb);
  var isAsync = fnOutput.a;
  var output = input === fnOutput ? input : ({
        s: b,
        a: isAsync
      });
  var catchCode$1 = maybeResolveVal !== undefined ? (function (catchLocation) {
        return catchCode + (
                catchLocation === 1 ? "return Promise.resolve(" + inline(b, maybeResolveVal) + ")" : (
                    catchLocation === 2 ? "return " + inline(b, maybeResolveVal) : set(b, output, maybeResolveVal)
                  )
              ) + ("}else{throw " + errorVar + "}");
      }) : (function (param) {
        return catchCode + "}throw " + errorVar;
      });
  var fnOutputVar = $$var(b, fnOutput);
  b.c = prevCode + ("try{" + b.c + (
      isAsync ? setInlined(b, output, "()=>{try{return " + fnOutputVar + "().catch(" + errorVar + "=>{" + catchCode$1(2) + "})}catch(" + errorVar + "){" + catchCode$1(1) + "}}") : set(b, output, fnOutput)
    ) + "}catch(" + errorVar + "){" + catchCode$1(0) + "}");
  return output;
}

function withPathPrepend(b, input, path, maybeDynamicLocationVar, fn) {
  if (path === "" && maybeDynamicLocationVar === undefined) {
    return fn(b, input, path);
  }
  try {
    return withCatch(b, input, (function (b, errorVar) {
                  b.c = errorVar + ".path=" + JSON.stringify(path) + "+" + (
                    maybeDynamicLocationVar !== undefined ? "'[\"'+" + maybeDynamicLocationVar + "+'\"]'+" : ""
                  ) + errorVar + ".path";
                }), (function (b) {
                  return fn(b, input, "");
                }));
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Raised) {
      var error$1 = error._1;
      throw new RescriptSchemaError(error$1.code, error$1.operation, path + "[]" + error$1.path);
    }
    throw error;
  }
}

function typeFilterCode(b, typeFilter, schema, input, path) {
  var inputVar = $$var(b, input);
  return "if(" + typeFilter(inputVar) + "){" + raiseWithArg(b, path, (function (input) {
                return {
                        TAG: "InvalidType",
                        expected: schema,
                        received: input
                      };
              }), inputVar) + "}";
}

function use(b, schema, input, path) {
  var isParsing = b.o === "Parsing";
  return (
            isParsing ? schema.p : schema.s
          )(b, input, schema, path);
}

function useWithTypeFilter(b, schema, input, path) {
  var typeFilter = schema.f;
  if (typeFilter === undefined) {
    return use(b, schema, input, path);
  }
  b.c = b.c + typeFilterCode(b, typeFilter, schema, input, path);
  var bb = scope(b);
  var val = use(bb, schema, input, path);
  b.c = b.c + allocateScope(bb);
  return val;
}

function noop(_b, input, param, param$1) {
  return input;
}

function noopOperation(i) {
  return i;
}

function build(builder, schema, operation) {
  var b = {
    c: "",
    o: operation,
    v: -1,
    l: "",
    a: false,
    p: (void 0),
    e: []
  };
  var input = {
    v: "i",
    s: b,
    a: false
  };
  var output = builder(b, input, schema, "");
  if (b.l !== "") {
    b.c = "let " + b.l + ";" + b.c;
  }
  if (operation === "Parsing") {
    var typeFilter = schema.f;
    if (typeFilter !== undefined) {
      b.c = typeFilterCode(b, typeFilter, schema, input, "") + b.c;
    }
    schema.i = output.a;
  }
  if (b.c === "" && output === input) {
    return noopOperation;
  }
  var inlinedFunction = "i=>{" + b.c + "return " + inline(b, output) + "}";
  console.log(inlinedFunction);
  return new Function("e", "s", "return " + inlinedFunction)(b.e, symbol);
}

function value(literal) {
  return literal.value;
}

function isJsonable(literal) {
  return literal.j;
}

function toString(literal) {
  return literal.s;
}

function arrayCheckBuilder(b, inputVar, literal) {
  var items = literal.i;
  return "(" + inputVar + "===" + ("e[" + (b.e.push(literal.value) - 1) + "]") + "||Array.isArray(" + inputVar + ")&&" + inputVar + ".length===" + items.length + (
          items.length > 0 ? "&&" + items.map(function (literal, idx) {
                    return literal.b(b, inputVar + "[" + idx + "]", literal);
                  }).join("&&") : ""
        ) + ")";
}

function dictCheckBuilder(b, inputVar, literal) {
  var items = literal.i;
  var fields = Object.keys(items);
  var numberOfFields = fields.length;
  return "(" + inputVar + "===" + ("e[" + (b.e.push(value) - 1) + "]") + "||" + inputVar + "&&" + inputVar + ".constructor===Object&&Object.keys(" + inputVar + ").length===" + numberOfFields + (
          numberOfFields > 0 ? "&&" + fields.map(function (field) {
                    var literal = items[field];
                    return literal.b(b, inputVar + "[" + JSON.stringify(field) + "]", literal);
                  }).join("&&") : ""
        ) + ")";
}

function inlinedStrictEqualCheckBuilder(param, inputVar, literal) {
  return inputVar + "===" + literal.s;
}

function strictEqualCheckBuilder(b, inputVar, literal) {
  return inputVar + "===" + ("e[" + (b.e.push(literal.value) - 1) + "]");
}

var undefined_value = undefined;

var $$undefined = {
  kind: "Undefined",
  value: undefined_value,
  s: "undefined",
  b: inlinedStrictEqualCheckBuilder,
  j: false
};

var null_value = null;

var $$null = {
  kind: "Null",
  value: null_value,
  s: "null",
  b: inlinedStrictEqualCheckBuilder,
  j: true
};

var nan_value = NaN;

function nan_b(param, inputVar, param$1) {
  return "Number.isNaN(" + inputVar + ")";
}

var nan = {
  kind: "NaN",
  value: nan_value,
  s: "NaN",
  b: nan_b,
  j: false
};

function parseInternal(value) {
  var typeOfValue = typeof value;
  if (typeOfValue === "symbol") {
    return {
            kind: "Symbol",
            value: value,
            s: value.toString(),
            b: strictEqualCheckBuilder,
            j: false
          };
  } else if (typeOfValue === "boolean") {
    return {
            kind: "Boolean",
            value: value,
            s: value ? "true" : "false",
            b: inlinedStrictEqualCheckBuilder,
            j: true
          };
  } else if (typeOfValue === "string") {
    return {
            kind: "String",
            value: value,
            s: JSON.stringify(value),
            b: inlinedStrictEqualCheckBuilder,
            j: true
          };
  } else if (typeOfValue === "function") {
    return {
            kind: "Function",
            value: value,
            s: value.toString(),
            b: strictEqualCheckBuilder,
            j: false
          };
  } else if (typeOfValue === "object") {
    if (value === null) {
      return $$null;
    } else if (Array.isArray(value)) {
      var items = [];
      var isJsonable = true;
      var string = "[";
      for(var idx = 0 ,idx_finish = value.length; idx < idx_finish; ++idx){
        var itemValue = value[idx];
        var itemLiteral = parseInternal(itemValue);
        if (isJsonable && !itemLiteral.j) {
          isJsonable = false;
        }
        if (idx !== 0) {
          string = string + ",";
        }
        string = string + itemLiteral.s;
        items.push(itemLiteral);
      }
      return {
              kind: "Array",
              value: value,
              s: string + "]",
              b: arrayCheckBuilder,
              j: isJsonable,
              i: Caml_option.some(items)
            };
    } else if (value.constructor === Object) {
      var items$1 = {};
      var string$1 = "{";
      var isJsonable$1 = true;
      var fields = Object.keys(value);
      var numberOfFields = fields.length;
      for(var idx$1 = 0; idx$1 < numberOfFields; ++idx$1){
        var field = fields[idx$1];
        var itemValue$1 = value[field];
        var itemLiteral$1 = parseInternal(itemValue$1);
        if (isJsonable$1 && !itemLiteral$1.j) {
          isJsonable$1 = false;
        }
        if (idx$1 !== 0) {
          string$1 = string$1 + ",";
        }
        string$1 = string$1 + (JSON.stringify(field) + ":" + itemLiteral$1.s);
        items$1[field] = itemLiteral$1;
      }
      return {
              kind: "Dict",
              value: value,
              s: string$1 + "}",
              b: dictCheckBuilder,
              j: isJsonable$1,
              i: Caml_option.some(items$1)
            };
    } else {
      return {
              kind: "Object",
              value: value,
              s: Object.prototype.toString.call(value),
              b: strictEqualCheckBuilder,
              j: false
            };
    }
  } else if (typeOfValue === "undefined") {
    return $$undefined;
  } else if (typeOfValue === "number") {
    if (Number.isNaN(value)) {
      return nan;
    } else {
      return {
              kind: "Number",
              value: value,
              s: value.toString(),
              b: inlinedStrictEqualCheckBuilder,
              j: true
            };
    }
  } else {
    return {
            kind: "BigInt",
            value: value,
            s: value.toString() + "n",
            b: inlinedStrictEqualCheckBuilder,
            j: false
          };
  }
}

function parse(any) {
  return parseInternal(any);
}

function fromSchema(schema) {
  var literal = schema.t;
  if (typeof literal !== "object" || literal.TAG !== "Literal") {
    return ;
  } else {
    return literal._0;
  }
}

function isAsyncParse(schema) {
  var v = schema.i;
  if (typeof v === "boolean") {
    return v;
  }
  try {
    build(schema.p, schema, "Parsing");
    return schema.i;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    getOrRethrow(exn);
    return false;
  }
}

function validateJsonableSchema(_schema, rootSchema, _isRootOpt) {
  while(true) {
    var isRootOpt = _isRootOpt;
    var schema = _schema;
    var isRoot = isRootOpt !== undefined ? isRootOpt : false;
    if (!(isRoot || rootSchema !== schema)) {
      return ;
    }
    var childrenSchemas = schema.t;
    var exit = 0;
    if (typeof childrenSchemas !== "object") {
      if (childrenSchemas !== "Unknown") {
        return ;
      }
      exit = 2;
    } else {
      switch (childrenSchemas.TAG) {
        case "Literal" :
            if (childrenSchemas._0.j) {
              return ;
            }
            exit = 2;
            break;
        case "Option" :
            exit = 2;
            break;
        case "Object" :
            var fieldNames = childrenSchemas.fieldNames;
            var fields = childrenSchemas.fields;
            for(var idx = 0 ,idx_finish = fieldNames.length; idx < idx_finish; ++idx){
              var fieldName = fieldNames[idx];
              var fieldSchema = fields[fieldName];
              try {
                var s = fieldSchema.t;
                var tmp;
                tmp = typeof s !== "object" || s.TAG !== "Option" ? fieldSchema : s._0;
                validateJsonableSchema(tmp, rootSchema, undefined);
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                prependLocationOrRethrow(exn, fieldName);
              }
            }
            return ;
        case "Tuple" :
            childrenSchemas._0.forEach(function (schema, i) {
                  try {
                    return validateJsonableSchema(schema, rootSchema, undefined);
                  }
                  catch (raw_exn){
                    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                    return prependLocationOrRethrow(exn, i.toString());
                  }
                });
            return ;
        case "Union" :
            childrenSchemas._0.forEach(function (schema) {
                  validateJsonableSchema(schema, rootSchema, undefined);
                });
            return ;
        case "Null" :
        case "Array" :
        case "Dict" :
            exit = 1;
            break;
        default:
          return ;
      }
    }
    switch (exit) {
      case 1 :
          _isRootOpt = undefined;
          _schema = childrenSchemas._0;
          continue ;
      case 2 :
          throw new RescriptSchemaError({
                    TAG: "InvalidJsonStruct",
                    _0: schema
                  }, "Serializing", "");
      
    }
  };
}

function unexpectedAsync() {
  throw new RescriptSchemaError("UnexpectedAsync", "Parsing", "");
}

function init(schema) {
  var operation = build(schema.p, schema, "Parsing");
  var isAsync = schema.i;
  if (isAsync) {
    return unexpectedAsync;
  } else {
    return operation;
  }
}

function parseAnyOrRaiseWith(i, s) {
  try {
    return s["op"](i);
  }
  catch (exn){
    if (s["op"]) {
      throw exn;
    }
    var o = init(s);
    s["op"] = o;
    return o(i);
  }
}

function parseAnyWith(any, schema) {
  try {
    return {
            TAG: "Ok",
            _0: parseAnyOrRaiseWith(any, schema)
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: getOrRethrow(exn)
          };
  }
}

function asyncPrepareOk(value) {
  return {
          TAG: "Ok",
          _0: value
        };
}

function asyncPrepareError(jsExn) {
  return {
          TAG: "Error",
          _0: getOrRethrow(jsExn)
        };
}

function init$1(schema) {
  var operation = build(schema.p, schema, "Parsing");
  var isAsync = schema.i;
  if (isAsync) {
    return operation;
  } else {
    return function (input) {
      var syncValue = operation(input);
      return function () {
        return Promise.resolve(syncValue);
      };
    };
  }
}

function internalParseAsyncWith(i, s) {
  try {
    return s["opa"](i);
  }
  catch (exn){
    if (s["opa"]) {
      throw exn;
    }
    var o = init$1(s);
    s["opa"] = o;
    return o(i);
  }
}

function parseAnyAsyncWith(any, schema) {
  try {
    return internalParseAsyncWith(any, schema)().then(asyncPrepareOk, asyncPrepareError);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return Promise.resolve({
                TAG: "Error",
                _0: getOrRethrow(exn)
              });
  }
}

function parseAnyAsyncInStepsWith(any, schema) {
  try {
    var asyncFn = internalParseAsyncWith(any, schema);
    return {
            TAG: "Ok",
            _0: (function () {
                return asyncFn().then(asyncPrepareOk, asyncPrepareError);
              })
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: getOrRethrow(exn)
          };
  }
}

function init$2(schema) {
  validateJsonableSchema(schema, schema, true);
  return build(schema.s, schema, "Serializing");
}

function serializeOrRaiseWith(i, s) {
  try {
    return s["osj"](i);
  }
  catch (exn){
    if (s["osj"]) {
      throw exn;
    }
    var o = init$2(s);
    s["osj"] = o;
    return o(i);
  }
}

function serializeWith(value, schema) {
  try {
    return {
            TAG: "Ok",
            _0: serializeOrRaiseWith(value, schema)
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: getOrRethrow(exn)
          };
  }
}

function init$3(schema) {
  return build(schema.s, schema, "Serializing");
}

function serializeToUnknownOrRaiseWith(i, s) {
  try {
    return s["os"](i);
  }
  catch (exn){
    if (s["os"]) {
      throw exn;
    }
    var o = init$3(s);
    s["os"] = o;
    return o(i);
  }
}

function serializeToUnknownWith(value, schema) {
  try {
    return {
            TAG: "Ok",
            _0: serializeToUnknownOrRaiseWith(value, schema)
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: getOrRethrow(exn)
          };
  }
}

function serializeToJsonStringWith(value, schema, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  var json = serializeWith(value, schema);
  if (json.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: JSON.stringify(json._0, null, space)
          };
  } else {
    return json;
  }
}

function serializeToJsonStringOrRaiseWith(value, schema, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  return JSON.stringify(serializeOrRaiseWith(value, schema), null, space);
}

function parseJsonStringWith(json, schema) {
  var json$1;
  try {
    json$1 = {
      TAG: "Ok",
      _0: JSON.parse(json)
    };
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Js_exn.$$Error) {
      json$1 = {
        TAG: "Error",
        _0: new RescriptSchemaError({
              TAG: "OperationFailed",
              _0: error._1.message
            }, "Parsing", "")
      };
    } else {
      throw error;
    }
  }
  if (json$1.TAG === "Ok") {
    return parseAnyWith(json$1._0, schema);
  } else {
    return json$1;
  }
}

function make$1(namespace, name) {
  return namespace + ":" + name;
}

var Id = {
  make: make$1
};

var empty = {};

function set$1(map, id, metadata) {
  if (map === empty) {
    return ({[id]:metadata});
  }
  var copy = Object.assign({}, map);
  copy[id] = metadata;
  return copy;
}

function get(schema, id) {
  return schema.m[id];
}

function set$2(schema, id, metadata) {
  var metadataMap = set$1(schema.m, id, metadata);
  return {
          t: schema.t,
          n: schema.n,
          p: schema.p,
          s: schema.s,
          f: schema.f,
          i: 0,
          m: metadataMap
        };
}

function recursive(fn) {
  var placeholder = {
    m: empty
  };
  var schema = fn(placeholder);
  Object.assign(placeholder, schema);
  var builder = placeholder.p;
  placeholder.p = (function (b, input, selfSchema, path) {
      selfSchema.p = noop;
      var b$1 = {
        c: "",
        o: "Parsing",
        v: -1,
        l: "",
        a: false,
        p: (void 0),
        e: []
      };
      var input$1 = {
        v: "i",
        s: b$1,
        a: false
      };
      var output = builder(b$1, input$1, selfSchema, path);
      var isAsync = output.a;
      selfSchema.p = (function (b, input, selfSchema, param) {
          if (isAsync) {
            return embedAsyncOperation(b, input, (function (input) {
                          return internalParseAsyncWith(input, selfSchema);
                        }));
          } else {
            return embedSyncOperation(b, input, (function (input) {
                          return parseAnyOrRaiseWith(input, selfSchema);
                        }));
          }
        });
      var operation = build(builder, selfSchema, "Parsing");
      if (isAsync) {
        selfSchema["opa"] = operation;
      } else {
        selfSchema["op"] = operation;
      }
      selfSchema.p = builder;
      return withPathPrepend(b, input, path, undefined, (function (b, input, param) {
                    if (isAsync) {
                      return embedAsyncOperation(b, input, operation);
                    } else {
                      return embedSyncOperation(b, input, operation);
                    }
                  }));
    });
  var builder$1 = placeholder.s;
  placeholder.s = (function (b, input, selfSchema, path) {
      selfSchema.s = (function (b, input, selfSchema, param) {
          return embedSyncOperation(b, input, (function (input) {
                        return serializeToUnknownOrRaiseWith(input, selfSchema);
                      }));
        });
      var operation = build(builder$1, selfSchema, "Serializing");
      selfSchema["os"] = operation;
      selfSchema.s = builder$1;
      return withPathPrepend(b, input, path, undefined, (function (b, input, param) {
                    return embedSyncOperation(b, input, operation);
                  }));
    });
  return placeholder;
}

function setName(schema, name) {
  return {
          t: schema.t,
          n: (function () {
              return name;
            }),
          p: schema.p,
          s: schema.s,
          f: schema.f,
          i: 0,
          m: schema.m
        };
}

function primitiveName() {
  return this.t;
}

function containerName() {
  var tagged = this.t;
  return tagged.TAG + "(" + tagged._0.n() + ")";
}

function internalRefine(schema, refiner) {
  return {
          t: schema.t,
          n: schema.n,
          p: (function (b, input, selfSchema, path) {
              return transform(b, use(b, schema, input, path), (function (b, input) {
                            var rCode = refiner(b, input, selfSchema, path);
                            b.c = b.c + rCode;
                            return input;
                          }));
            }),
          s: (function (b, input, selfSchema, path) {
              return use(b, schema, transform(b, input, (function (b, input) {
                                b.c = b.c + refiner(b, input, selfSchema, path);
                                return input;
                              })), path);
            }),
          f: schema.f,
          i: 0,
          m: schema.m
        };
}

function refine(schema, refiner) {
  return internalRefine(schema, (function (b, input, selfSchema, path) {
                var value = refiner(make(selfSchema, path, b.o));
                return "e[" + (b.e.push(value) - 1) + "](" + $$var(b, input) + ");";
              }));
}

function addRefinement(schema, metadataId, refinement, refiner) {
  var refinements = schema.m[metadataId];
  return internalRefine(set$2(schema, metadataId, refinements !== undefined ? refinements.concat(refinement) : [refinement]), refiner);
}

function transform$1(schema, transformer) {
  return {
          t: schema.t,
          n: schema.n,
          p: (function (b, input, selfSchema, path) {
              var input$1 = use(b, schema, input, path);
              var match = transformer(make(selfSchema, path, b.o));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.transform doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                } else {
                  return embedSyncOperation(b, input$1, parser);
                }
              }
              var asyncParser = match.a;
              if (asyncParser !== undefined) {
                return embedAsyncOperation(b, input$1, asyncParser);
              } else if (match.s !== undefined) {
                return invalidOperation(b, path, "The S.transform parser is missing");
              } else {
                return input$1;
              }
            }),
          s: (function (b, input, selfSchema, path) {
              var match = transformer(make(selfSchema, path, b.o));
              var serializer = match.s;
              if (serializer !== undefined) {
                return use(b, schema, embedSyncOperation(b, input, serializer), path);
              } else if (match.a !== undefined || match.p !== undefined) {
                return invalidOperation(b, path, "The S.transform serializer is missing");
              } else {
                return use(b, schema, input, path);
              }
            }),
          f: schema.f,
          i: 0,
          m: schema.m
        };
}

function preprocess(schema, transformer) {
  var unionSchemas = schema.t;
  if (typeof unionSchemas === "object" && unionSchemas.TAG === "Union") {
    return {
            t: {
              TAG: "Union",
              _0: unionSchemas._0.map(function (unionSchema) {
                    return preprocess(unionSchema, transformer);
                  })
            },
            n: schema.n,
            p: schema.p,
            s: schema.s,
            f: schema.f,
            i: 0,
            m: schema.m
          };
  }
  return {
          t: schema.t,
          n: schema.n,
          p: (function (b, input, selfSchema, path) {
              var match = transformer(make(selfSchema, path, b.o));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.preprocess doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                } else {
                  return useWithTypeFilter(b, schema, embedSyncOperation(b, input, parser), path);
                }
              }
              var asyncParser = match.a;
              if (asyncParser !== undefined) {
                return transform(b, embedAsyncOperation(b, input, asyncParser), (function (b, input) {
                              return useWithTypeFilter(b, schema, input, path);
                            }));
              } else {
                return useWithTypeFilter(b, schema, input, path);
              }
            }),
          s: (function (b, input, selfSchema, path) {
              var input$1 = use(b, schema, input, path);
              var match = transformer(make(selfSchema, path, b.o));
              var serializer = match.s;
              if (serializer !== undefined) {
                return embedSyncOperation(b, input$1, serializer);
              } else {
                return input$1;
              }
            }),
          f: undefined,
          i: 0,
          m: schema.m
        };
}

function custom(name, definer) {
  return {
          t: "Unknown",
          n: (function () {
              return name;
            }),
          p: (function (b, input, selfSchema, path) {
              var match = definer(make(selfSchema, path, b.o));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.custom doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                } else {
                  return embedSyncOperation(b, input, parser);
                }
              }
              var asyncParser = match.a;
              if (asyncParser !== undefined) {
                return embedAsyncOperation(b, input, asyncParser);
              } else if (match.s !== undefined) {
                return invalidOperation(b, path, "The S.custom parser is missing");
              } else {
                return input;
              }
            }),
          s: (function (b, input, selfSchema, path) {
              var match = definer(make(selfSchema, path, b.o));
              var serializer = match.s;
              if (serializer !== undefined) {
                return embedSyncOperation(b, input, serializer);
              } else if (match.a !== undefined || match.p !== undefined) {
                return invalidOperation(b, path, "The S.custom serializer is missing");
              } else {
                return input;
              }
            }),
          f: undefined,
          i: 0,
          m: empty
        };
}

function literal(value) {
  var literal$1 = parseInternal(value);
  var operationBuilder = function (b, input, param, path) {
    var inputVar = $$var(b, input);
    b.c = b.c + (literal$1.b(b, inputVar, literal$1) + "||" + raiseWithArg(b, path, (function (input) {
              return {
                      TAG: "InvalidLiteral",
                      expected: literal$1,
                      received: input
                    };
            }), inputVar) + ";");
    return input;
  };
  return {
          t: {
            TAG: "Literal",
            _0: literal$1
          },
          n: (function () {
              return "Literal(" + literal$1.s + ")";
            }),
          p: operationBuilder,
          s: operationBuilder,
          f: undefined,
          i: 0,
          m: empty
        };
}

var unit = literal((void 0));

function toKindWithSet(definition, embededSet) {
  if (embededSet.has(definition)) {
    return 2;
  } else if (typeof definition === "object" && definition !== null) {
    return 0;
  } else {
    return 1;
  }
}

function factory(schema, definer) {
  return {
          t: schema.t,
          n: schema.n,
          p: (function (b, input, param, path) {
              return embedSyncOperation(b, use(b, schema, input, path), definer);
            }),
          s: (function (b, input, selfSchema, path) {
              var inputVar = $$var(b, input);
              var definition = definer(symbol);
              var definitionToOutput = function (definition, outputPath) {
                var kind = symbol === definition ? 2 : (
                    typeof definition === "object" && definition !== null ? 0 : 1
                  );
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      var maybeOutputRef = 0;
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        var maybeOutput = definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                        var match = maybeOutputRef;
                        if (typeof match !== "object") {
                          if (match === 0) {
                            maybeOutputRef = maybeOutput;
                          }
                          
                        } else if (!(typeof maybeOutput !== "object" && maybeOutput === 0)) {
                          maybeOutputRef = 1;
                        }
                        
                      }
                      return maybeOutputRef;
                  case 1 :
                      var constantVal = outputPath === "" ? input : val(b, inputVar + outputPath);
                      var constantVar = $$var(b, constantVal);
                      b.c = b.c + ("if(" + constantVar + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                                return {
                                        TAG: "InvalidLiteral",
                                        expected: parseInternal(definition),
                                        received: input
                                      };
                              }), constantVar) + "}");
                      return 0;
                  case 2 :
                      return outputPath === "" ? input : val(b, inputVar + outputPath);
                  
                }
              };
              var output = definitionToOutput(definition, "");
              if (typeof output === "object") {
                return use(b, schema, output, path);
              }
              if (output !== 0) {
                return invalidOperation(b, path, "Can't create serializer. The S.variant's value is registered multiple times. Use S.transform instead");
              }
              var literal = fromSchema(selfSchema);
              if (literal !== undefined) {
                return use(b, schema, val(b, "e[" + (b.e.push(literal.value) - 1) + "]"), path);
              } else {
                return invalidOperation(b, path, "Can't create serializer. The S.variant's value is not registered and not a literal. Use S.transform instead");
              }
            }),
          f: schema.f,
          i: 0,
          m: schema.m
        };
}

var defaultMetadataId = "rescript-schema:Option.default";

function $$default(schema) {
  return schema.m[defaultMetadataId];
}

function parseOperationBuilder(b, input, selfSchema, path) {
  var isNull = (selfSchema.t.TAG === "Null");
  var childSchema = selfSchema.t._0;
  var bb = scope(b);
  var itemOutput = use(bb, childSchema, input, path);
  var itemCode = allocateScope(bb);
  var isTransformed = isNull || itemOutput !== input;
  var output = isTransformed ? ({
        s: b,
        a: itemOutput.a
      }) : input;
  if (itemCode !== "" || isTransformed) {
    b.c = b.c + ("if(" + $$var(b, input) + "!==" + (
        isNull ? "null" : "void 0"
      ) + "){" + itemCode + set(b, output, itemOutput) + "}" + (
        isNull || output.a ? "else{" + set(b, output, val(b, "void 0")) + "}" : ""
      ));
  }
  return output;
}

function serializeOperationBuilder(b, input, selfSchema, path) {
  var output = allocateVal(b);
  var inputVar = $$var(b, input);
  var isNull = (selfSchema.t.TAG === "Null");
  var childSchema = selfSchema.t._0;
  var bb = scope(b);
  var value = Caml_option.valFromOption;
  var itemOutput = use(bb, childSchema, map(bb, "e[" + (bb.e.push(value) - 1) + "]", input), path);
  var itemCode = allocateScope(bb);
  b.c = b.c + ("if(" + inputVar + "!==void 0){" + itemCode + set(b, output, itemOutput) + "}" + (
      isNull ? "else{" + setInlined(b, output, "null") + "}" : ""
    ));
  return output;
}

function maybeTypeFilter(schema, inlinedNoneValue) {
  var typeFilter = schema.f;
  if (typeFilter !== undefined) {
    return (function (inputVar) {
              return inputVar + "!==" + inlinedNoneValue + "&&(" + typeFilter(inputVar) + ")";
            });
  }
  
}

function factory$1(schema) {
  return {
          t: {
            TAG: "Option",
            _0: schema
          },
          n: containerName,
          p: parseOperationBuilder,
          s: serializeOperationBuilder,
          f: maybeTypeFilter(schema, "void 0"),
          i: 0,
          m: empty
        };
}

function getWithDefault(schema, $$default) {
  return {
          t: schema.t,
          n: schema.n,
          p: (function (b, input, param, path) {
              return transform(b, use(b, schema, input, path), (function (b, input) {
                            var inputVar = $$var(b, input);
                            var tmp;
                            tmp = $$default.TAG === "Value" ? "e[" + (b.e.push($$default._0) - 1) + "]" : "e[" + (b.e.push($$default._0) - 1) + "]()";
                            return val(b, inputVar + "===void 0?" + tmp + ":" + inputVar);
                          }));
            }),
          s: schema.s,
          f: schema.f,
          i: 0,
          m: set$1(schema.m, defaultMetadataId, $$default)
        };
}

function getOr(schema, defalutValue) {
  return getWithDefault(schema, {
              TAG: "Value",
              _0: defalutValue
            });
}

function getOrWith(schema, defalutCb) {
  return getWithDefault(schema, {
              TAG: "Callback",
              _0: defalutCb
            });
}

function factory$2(schema) {
  return {
          t: {
            TAG: "Null",
            _0: schema
          },
          n: containerName,
          p: parseOperationBuilder,
          s: serializeOperationBuilder,
          f: maybeTypeFilter(schema, "null"),
          i: 0,
          m: empty
        };
}

function nullable(schema) {
  return factory$1(factory$2(schema));
}

function typeFilter(inputVar) {
  return "!" + inputVar + "||" + inputVar + ".constructor!==Object";
}

function noopRefinement(_b, param, param$1, param$2) {
  
}

function makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet, definition, unknownKeysRefinement) {
  return function (b, input, selfSchema, path) {
    var registeredDefinitions = new Set();
    var asyncOutputVars = [];
    var inputVar = $$var(b, input);
    var prevCode = b.c;
    b.c = "";
    var definitionToOutput = function (definition, outputPath) {
      var kind = toKindWithSet(definition, itemDefinitionsSet);
      switch (kind) {
        case 0 :
            var isArray = Array.isArray(definition);
            var keys = Object.keys(definition);
            var codeRef = isArray ? "[" : "{";
            for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
              var key = keys[idx];
              var definition$1 = definition[key];
              var output = definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
              codeRef = codeRef + (
                isArray ? output : JSON.stringify(key) + ":" + output
              ) + ",";
            }
            return codeRef + (
                    isArray ? "]" : "}"
                  );
        case 1 :
            return "e[" + (b.e.push(definition) - 1) + "]";
        case 2 :
            registeredDefinitions.add(definition);
            var inputPath = definition.p;
            var fieldOuput = useWithTypeFilter(b, definition.s, val(b, inputVar + inputPath), path + inputPath);
            if (!fieldOuput.a) {
              return inline(b, fieldOuput);
            }
            var asyncOutputVar = $$var(b, fieldOuput);
            asyncOutputVars.push(asyncOutputVar);
            return asyncOutputVar;
        
      }
    };
    var syncOutput = definitionToOutput(definition, "");
    var registeredFieldsCode = b.c;
    b.c = "";
    for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
      var itemDefinition = itemDefinitions[idx];
      if (!registeredDefinitions.has(itemDefinition)) {
        var inputPath = itemDefinition.p;
        var fieldOuput = useWithTypeFilter(b, itemDefinition.s, val(b, inputVar + inputPath), path + inputPath);
        if (fieldOuput.a) {
          asyncOutputVars.push($$var(b, fieldOuput));
        }
        
      }
      
    }
    var unregisteredFieldsCode = b.c;
    b.c = prevCode + unregisteredFieldsCode + registeredFieldsCode;
    unknownKeysRefinement(b, input, selfSchema, path);
    if (asyncOutputVars.length === 0) {
      return val(b, syncOutput);
    } else {
      return asyncVal(b, "()=>Promise.all([" + asyncOutputVars.map(function (asyncOutputVar) {
                        return asyncOutputVar + "()";
                      }).join(",") + "]).then(([" + asyncOutputVars.toString() + "])=>(" + syncOutput + "))");
    }
  };
}

function factory$3(definer) {
  var fields = {};
  var fieldNames = [];
  var itemDefinitionsSet = new Set();
  var field = function (fieldName, schema) {
    var inlinedInputLocation = JSON.stringify(fieldName);
    if (fields[fieldName]) {
      throw new Error("[rescript-schema] " + ("The field " + inlinedInputLocation + " is defined multiple times. If you want to duplicate the field, use S.transform instead."));
    }
    var itemDefinition_p = "[" + inlinedInputLocation + "]";
    var itemDefinition = {
      s: schema,
      l: inlinedInputLocation,
      p: itemDefinition_p
    };
    fields[fieldName] = schema;
    fieldNames.push(fieldName);
    itemDefinitionsSet.add(itemDefinition);
    return itemDefinition;
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, literal(asValue));
  };
  var fieldOr = function (fieldName, schema, or) {
    return field(fieldName, getOr(factory$1(schema), or));
  };
  var ctx = {
    n: fieldNames,
    h: fields,
    d: itemDefinitionsSet,
    field: field,
    fieldOr: fieldOr,
    tag: tag,
    f: field,
    o: fieldOr,
    t: tag
  };
  var definition = definer(ctx);
  var itemDefinitionsSet$1 = itemDefinitionsSet;
  var fields$1 = fields;
  var fieldNames$1 = fieldNames;
  var itemDefinitions = Array.from(itemDefinitionsSet$1);
  return {
          t: {
            TAG: "Object",
            fields: fields$1,
            fieldNames: fieldNames$1,
            unknownKeys: "Strip"
          },
          n: (function () {
              return "Object({" + fieldNames$1.map(function (fieldName) {
                            var fieldSchema = fields$1[fieldName];
                            return JSON.stringify(fieldName) + ": " + fieldSchema.n();
                          }).join(", ") + "})";
            }),
          p: makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet$1, definition, (function (b, input, selfSchema, path) {
                  var inputVar = $$var(b, input);
                  var withUnknownKeysRefinement = selfSchema.t.unknownKeys === "Strict";
                  if (!withUnknownKeysRefinement) {
                    return ;
                  }
                  if (itemDefinitions.length !== 0) {
                    var key = allocateVal(b);
                    var keyVar = $$var(b, key);
                    b.c = b.c + ("for(" + keyVar + " in " + inputVar + "){if(");
                    for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                      var itemDefinition = itemDefinitions[idx];
                      if (idx !== 0) {
                        b.c = b.c + "&&";
                      }
                      b.c = b.c + (keyVar + "!==" + itemDefinition.l);
                    }
                    b.c = b.c + ("){" + raiseWithArg(b, path, (function (exccessFieldName) {
                              return {
                                      TAG: "ExcessField",
                                      _0: exccessFieldName
                                    };
                            }), keyVar) + "}}");
                    return ;
                  }
                  var key$1 = allocateVal(b);
                  var keyVar$1 = $$var(b, key$1);
                  b.c = b.c + ("for(" + keyVar$1 + " in " + inputVar + "){" + raiseWithArg(b, path, (function (exccessFieldName) {
                            return {
                                    TAG: "ExcessField",
                                    _0: exccessFieldName
                                  };
                          }), keyVar$1) + "}");
                })),
          s: (function (b, input, param, path) {
              var inputVar = $$var(b, input);
              var fieldsCodeRef = {
                contents: ""
              };
              var registeredDefinitions = new Set();
              var prevCode = b.c;
              b.c = "";
              var definitionToOutput = function (definition, outputPath) {
                var kind = toKindWithSet(definition, itemDefinitionsSet$1);
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                      }
                      return ;
                  case 1 :
                      b.c = "if(" + inputVar + outputPath + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                              return {
                                      TAG: "InvalidLiteral",
                                      expected: parseInternal(definition),
                                      received: input
                                    };
                            }), inputVar + outputPath) + "}" + b.c;
                      return ;
                  case 2 :
                      if (registeredDefinitions.has(definition)) {
                        return invalidOperation(b, path, "The field " + definition.l + " is registered multiple times. If you want to duplicate the field, use S.transform instead");
                      } else {
                        registeredDefinitions.add(definition);
                        fieldsCodeRef.contents = fieldsCodeRef.contents + (definition.l + ":" + inline(b, use(b, definition.s, val(b, inputVar + outputPath), path + outputPath)) + ",");
                        return ;
                      }
                  
                }
              };
              definitionToOutput(definition, "");
              b.c = prevCode + b.c;
              for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                var itemDefinition = itemDefinitions[idx];
                if (!registeredDefinitions.has(itemDefinition)) {
                  var inlinedInputLocation = itemDefinition.l;
                  var literal = fromSchema(itemDefinition.s);
                  if (literal !== undefined) {
                    fieldsCodeRef.contents = fieldsCodeRef.contents + (inlinedInputLocation + ":" + ("e[" + (b.e.push(literal.value) - 1) + "]") + ",");
                  } else {
                    invalidOperation(b, path, "Can't create serializer. The " + inlinedInputLocation + " field is not registered and not a literal. Use S.transform instead");
                  }
                }
                
              }
              return val(b, "{" + fieldsCodeRef.contents + "}");
            }),
          f: typeFilter,
          i: 0,
          m: empty
        };
}

function strip(schema) {
  var match = schema.t;
  if (typeof match !== "object" || !(match.TAG === "Object" && match.unknownKeys !== "Strip")) {
    return schema;
  } else {
    return {
            t: {
              TAG: "Object",
              fields: match.fields,
              fieldNames: match.fieldNames,
              unknownKeys: "Strip"
            },
            n: schema.n,
            p: schema.p,
            s: schema.s,
            f: schema.f,
            i: 0,
            m: schema.m
          };
  }
}

function strict(schema) {
  var match = schema.t;
  if (typeof match !== "object" || !(match.TAG === "Object" && match.unknownKeys === "Strip")) {
    return schema;
  } else {
    return {
            t: {
              TAG: "Object",
              fields: match.fields,
              fieldNames: match.fieldNames,
              unknownKeys: "Strict"
            },
            n: schema.n,
            p: schema.p,
            s: schema.s,
            f: schema.f,
            i: 0,
            m: schema.m
          };
  }
}

function builder(b, input, selfSchema, path) {
  b.c = b.c + raiseWithArg(b, path, (function (input) {
          return {
                  TAG: "InvalidType",
                  expected: selfSchema,
                  received: input
                };
        }), inline(b, input)) + ";";
  return input;
}

var schema = {
  t: "Never",
  n: primitiveName,
  p: builder,
  s: builder,
  f: undefined,
  i: 0,
  m: empty
};

var schema$1 = {
  t: "Unknown",
  n: primitiveName,
  p: noop,
  s: noop,
  f: undefined,
  i: false,
  m: empty
};

var metadataId = "rescript-schema:String.refinements";

function refinements(schema) {
  var m = schema.m[metadataId];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var cuidRegex = /^c[^\s-]{8,}$/i;

var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;

var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;

var datetimeRe = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/;

function typeFilter$1(inputVar) {
  return "typeof " + inputVar + "!==\"string\"";
}

var schema$2 = {
  t: "String",
  n: primitiveName,
  p: noop,
  s: noop,
  f: typeFilter$1,
  i: 0,
  m: empty
};

function factory$4(schema, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  try {
    validateJsonableSchema(schema, schema, true);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    getOrRethrow(exn);
    var message = "The schema " + schema.n() + " passed to S.jsonString is not compatible with JSON";
    throw new Error("[rescript-schema] " + message);
  }
  return {
          t: "String",
          n: primitiveName,
          p: (function (b, input, param, path) {
              var jsonVal = allocateVal(b);
              b.c = b.c + ("try{" + set(b, jsonVal, map(b, "JSON.parse", input)) + "}catch(t){" + raiseWithArg(b, path, (function (message) {
                        return {
                                TAG: "OperationFailed",
                                _0: message
                              };
                      }), "t.message") + "}");
              var bb = scope(b);
              var val = useWithTypeFilter(bb, schema, jsonVal, path);
              b.c = b.c + allocateScope(bb);
              return val;
            }),
          s: (function (b, input, param, path) {
              return val(b, "JSON.stringify(" + inline(b, use(b, schema, input, path)) + (
                          space > 0 ? ",null," + space : ""
                        ) + ")");
            }),
          f: typeFilter$1,
          i: 0,
          m: empty
        };
}

function typeFilter$2(inputVar) {
  return "typeof " + inputVar + "!==\"boolean\"";
}

var schema$3 = {
  t: "Bool",
  n: primitiveName,
  p: noop,
  s: noop,
  f: typeFilter$2,
  i: 0,
  m: empty
};

var metadataId$1 = "rescript-schema:Int.refinements";

function refinements$1(schema) {
  var m = schema.m[metadataId$1];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function typeFilter$3(inputVar) {
  return "typeof " + inputVar + "!==\"number\"||" + inputVar + ">2147483647||" + inputVar + "<-2147483648||" + inputVar + "%1!==0";
}

var schema$4 = {
  t: "Int",
  n: primitiveName,
  p: noop,
  s: noop,
  f: typeFilter$3,
  i: 0,
  m: empty
};

var metadataId$2 = "rescript-schema:Float.refinements";

function refinements$2(schema) {
  var m = schema.m[metadataId$2];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function typeFilter$4(inputVar) {
  return "typeof " + inputVar + "!==\"number\"||Number.isNaN(" + inputVar + ")";
}

var schema$5 = {
  t: "Float",
  n: primitiveName,
  p: noop,
  s: noop,
  f: typeFilter$4,
  i: 0,
  m: empty
};

var metadataId$3 = "rescript-schema:Array.refinements";

function refinements$3(schema) {
  var m = schema.m[metadataId$3];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function typeFilter$5(inputVar) {
  return "!Array.isArray(" + inputVar + ")";
}

function factory$5(schema) {
  return {
          t: {
            TAG: "Array",
            _0: schema
          },
          n: containerName,
          p: (function (b, input, param, path) {
              var inputVar = $$var(b, input);
              var iteratorVar = varWithoutAllocation(b);
              var bb = scope(b);
              var itemInput = val(bb, inputVar + "[" + iteratorVar + "]");
              var itemOutput = withPathPrepend(bb, itemInput, path, iteratorVar, (function (b, input, path) {
                      return useWithTypeFilter(b, schema, input, path);
                    }));
              var itemCode = allocateScope(bb);
              var isTransformed = itemInput !== itemOutput;
              var output = isTransformed ? val(b, "[]") : input;
              b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + itemCode + (
                  isTransformed ? push(b, output, itemOutput) : ""
                ) + "}");
              if (itemOutput.a) {
                return asyncVal(b, "()=>Promise.all(" + $$var(b, output) + ".map(t=>t()))");
              } else {
                return output;
              }
            }),
          s: (function (b, input, param, path) {
              if (schema.s === noop) {
                return input;
              }
              var inputVar = $$var(b, input);
              var iteratorVar = varWithoutAllocation(b);
              var output = val(b, "[]");
              var bb = scope(b);
              var itemOutput = withPathPrepend(bb, val(bb, inputVar + "[" + iteratorVar + "]"), path, iteratorVar, (function (b, input, path) {
                      return use(b, schema, input, path);
                    }));
              var itemCode = allocateScope(bb);
              b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + itemCode + push(b, output, itemOutput) + "}");
              return output;
            }),
          f: typeFilter$5,
          i: 0,
          m: empty
        };
}

function factory$6(schema) {
  return {
          t: {
            TAG: "Dict",
            _0: schema
          },
          n: containerName,
          p: (function (b, input, param, path) {
              var inputVar = $$var(b, input);
              var keyVar = varWithoutAllocation(b);
              var bb = scope(b);
              var itemInput = val(bb, inputVar + "[" + keyVar + "]");
              var itemOutput = withPathPrepend(bb, itemInput, path, keyVar, (function (b, input, path) {
                      return useWithTypeFilter(b, schema, input, path);
                    }));
              var itemCode = allocateScope(bb);
              var isTransformed = itemInput !== itemOutput;
              var output = isTransformed ? val(b, "{}") : input;
              b.c = b.c + ("for(let " + keyVar + " in " + inputVar + "){" + itemCode + (
                  isTransformed ? addKey(b, output, keyVar, itemOutput) : ""
                ) + "}");
              if (!itemOutput.a) {
                return output;
              }
              var resolveVar = varWithoutAllocation(b);
              var rejectVar = varWithoutAllocation(b);
              var asyncParseResultVar = varWithoutAllocation(b);
              var counterVar = varWithoutAllocation(b);
              var outputVar = $$var(b, output);
              return asyncVal(b, "()=>new Promise((" + resolveVar + "," + rejectVar + ")=>{let " + counterVar + "=Object.keys(" + outputVar + ").length;for(let " + keyVar + " in " + outputVar + "){" + outputVar + "[" + keyVar + "]().then(" + asyncParseResultVar + "=>{" + outputVar + "[" + keyVar + "]=" + asyncParseResultVar + ";if(" + counterVar + "--===1){" + resolveVar + "(" + outputVar + ")}}," + rejectVar + ")}})");
            }),
          s: (function (b, input, param, path) {
              if (schema.s === noop) {
                return input;
              }
              var inputVar = $$var(b, input);
              var output = val(b, "{}");
              var keyVar = varWithoutAllocation(b);
              var bb = scope(b);
              var itemOutput = withPathPrepend(bb, val(bb, inputVar + "[" + keyVar + "]"), path, keyVar, (function (b, input, path) {
                      return use(b, schema, input, path);
                    }));
              var itemCode = allocateScope(bb);
              b.c = b.c + ("for(let " + keyVar + " in " + inputVar + "){" + itemCode + addKey(b, output, keyVar, itemOutput) + "}");
              return output;
            }),
          f: typeFilter,
          i: 0,
          m: empty
        };
}

function factory$7(definer) {
  var schemas = [];
  var itemDefinitionsSet = new Set();
  var item = function (idx, schema) {
    var inlinedInputLocation = "\"" + idx + "\"";
    if (schemas[idx]) {
      throw new Error("[rescript-schema] " + ("The item " + inlinedInputLocation + " is defined multiple times. If you want to duplicate the item, use S.transform instead."));
    }
    var itemDefinition_p = "[" + inlinedInputLocation + "]";
    var itemDefinition = {
      s: schema,
      l: inlinedInputLocation,
      p: itemDefinition_p
    };
    schemas[idx] = schema;
    itemDefinitionsSet.add(itemDefinition);
    return itemDefinition;
  };
  var tag = function (idx, asValue) {
    item(idx, literal(asValue));
  };
  var ctx = {
    s: schemas,
    d: itemDefinitionsSet,
    item: item,
    tag: tag,
    i: item,
    t: tag
  };
  var definition = definer(ctx);
  var itemDefinitionsSet$1 = itemDefinitionsSet;
  var schemas$1 = schemas;
  var length = schemas$1.length;
  for(var idx = 0; idx < length; ++idx){
    if (!schemas$1[idx]) {
      var inlinedInputLocation = "\"" + idx + "\"";
      var itemDefinition_p = "[" + inlinedInputLocation + "]";
      var itemDefinition = {
        s: unit,
        l: inlinedInputLocation,
        p: itemDefinition_p
      };
      schemas$1[idx] = unit;
      itemDefinitionsSet$1.add(itemDefinition);
    }
    
  }
  var itemDefinitions = Array.from(itemDefinitionsSet$1);
  return {
          t: {
            TAG: "Tuple",
            _0: schemas$1
          },
          n: (function () {
              return "Tuple(" + schemas$1.map(function (s) {
                            return s.n();
                          }).join(", ") + ")";
            }),
          p: makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet$1, definition, noopRefinement),
          s: (function (b, input, param, path) {
              var output = val(b, "[]");
              var registeredDefinitions = new Set();
              var prevCode = b.c;
              b.c = "";
              var definitionToOutput = function (definition, outputPath) {
                var kind = toKindWithSet(definition, itemDefinitionsSet$1);
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                      }
                      return ;
                  case 1 :
                      b.c = "if(" + $$var(b, input) + outputPath + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                              return {
                                      TAG: "InvalidLiteral",
                                      expected: parseInternal(definition),
                                      received: input
                                    };
                            }), $$var(b, input) + outputPath) + "}" + b.c;
                      return ;
                  case 2 :
                      if (registeredDefinitions.has(definition)) {
                        return invalidOperation(b, path, "The item " + definition.l + " is registered multiple times. If you want to duplicate the item, use S.transform instead");
                      }
                      registeredDefinitions.add(definition);
                      var fieldOuputVar = inline(b, use(b, definition.s, val(b, $$var(b, input) + outputPath), path + outputPath));
                      b.c = b.c + ($$var(b, output) + definition.p + "=" + fieldOuputVar + ";");
                      return ;
                  
                }
              };
              definitionToOutput(definition, "");
              b.c = prevCode + b.c;
              for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                var itemDefinition = itemDefinitions[idx];
                if (!registeredDefinitions.has(itemDefinition)) {
                  var literal = fromSchema(itemDefinition.s);
                  if (literal !== undefined) {
                    b.c = b.c + ($$var(b, output) + itemDefinition.p + "=" + ("e[" + (b.e.push(literal.value) - 1) + "]") + ";");
                  } else {
                    invalidOperation(b, path, "Can't create serializer. The " + itemDefinition.l + " item is not registered and not a literal. Use S.transform instead");
                  }
                }
                
              }
              return output;
            }),
          f: (function (inputVar) {
              return typeFilter$5(inputVar) + ("||" + inputVar + ".length!==" + length);
            }),
          i: 0,
          m: empty
        };
}

function factory$8(schemas) {
  var len = schemas.length;
  if (len === 1) {
    return schemas[0];
  }
  if (len !== 0) {
    return {
            t: {
              TAG: "Union",
              _0: schemas
            },
            n: (function () {
                return "Union(" + schemas.map(function (s) {
                              return s.n();
                            }).join(", ") + ")";
              }),
            p: (function (b, input, selfSchema, path) {
                var schemas = selfSchema.t._0;
                var output = allocateVal(b);
                var codeEndRef = "";
                var errorCodeRef = "";
                var isAsync = false;
                for(var idx = 0 ,idx_finish = schemas.length; idx < idx_finish; ++idx){
                  var prevCode = b.c;
                  try {
                    var schema = schemas[idx];
                    var errorVar = "e" + idx;
                    b.c = b.c + "try{";
                    var itemOutput = useWithTypeFilter(b, schema, input, "");
                    if (itemOutput.a) {
                      isAsync = true;
                    }
                    b.c = b.c + (set(b, output, itemOutput) + "}catch(" + errorVar + "){");
                    codeEndRef = codeEndRef + "}";
                    errorCodeRef = errorCodeRef + errorVar + ",";
                  }
                  catch (raw_exn){
                    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                    var value = getOrRethrow(exn);
                    errorCodeRef = errorCodeRef + ("e[" + (b.e.push(value) - 1) + "]") + ",";
                    b.c = prevCode;
                  }
                }
                if (isAsync) {
                  invalidOperation(b, path, "S.union doesn't support async items. Please create an issue to rescript-schema if you nead the feature.");
                }
                b.c = b.c + raiseWithArg(b, path, (function (internalErrors) {
                        return {
                                TAG: "InvalidUnion",
                                _0: internalErrors
                              };
                      }), "[" + errorCodeRef + "]") + codeEndRef;
                var isAllSchemasBuilderFailed = codeEndRef === "";
                if (isAllSchemasBuilderFailed) {
                  b.c = b.c + ";";
                  return input;
                } else {
                  return output;
                }
              }),
            s: (function (b, input, selfSchema, path) {
                var schemas = selfSchema.t._0;
                var output = allocateVal(b);
                var codeEndRef = "";
                var errorCodeRef = "";
                for(var idx = 0 ,idx_finish = schemas.length; idx < idx_finish; ++idx){
                  var prevCode = b.c;
                  try {
                    var schema = schemas[idx];
                    var errorVar = "e" + idx;
                    b.c = b.c + "try{";
                    var itemOutput = use(b, schema, input, "");
                    var typeFilter = schema.f;
                    b.c = b.c + (
                      typeFilter !== undefined ? typeFilterCode(b, typeFilter, schema, itemOutput, "") : ""
                    ) + (set(b, output, itemOutput) + "}catch(" + errorVar + "){");
                    codeEndRef = codeEndRef + "}";
                    errorCodeRef = errorCodeRef + errorVar + ",";
                  }
                  catch (raw_exn){
                    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                    var value = getOrRethrow(exn);
                    errorCodeRef = errorCodeRef + ("e[" + (b.e.push(value) - 1) + "]") + ",";
                    b.c = prevCode;
                  }
                }
                b.c = b.c + raiseWithArg(b, path, (function (internalErrors) {
                        return {
                                TAG: "InvalidUnion",
                                _0: internalErrors
                              };
                      }), "[" + errorCodeRef + "]") + codeEndRef;
                var isAllSchemasBuilderFailed = codeEndRef === "";
                if (isAllSchemasBuilderFailed) {
                  b.c = b.c + ";";
                  return input;
                } else {
                  return output;
                }
              }),
            f: undefined,
            i: 0,
            m: empty
          };
  }
  throw new Error("[rescript-schema] S.union requires at least one item.");
}

function list(schema) {
  return transform$1(factory$5(schema), (function (param) {
                return {
                        p: Belt_List.fromArray,
                        s: Belt_List.toArray
                      };
              }));
}

function json(validate) {
  return {
          t: {
            TAG: "JSON",
            validated: validate
          },
          n: primitiveName,
          p: validate ? (function (b, input, selfSchema, path) {
                var parse = function (input, pathOpt) {
                  var path$1 = pathOpt !== undefined ? pathOpt : path;
                  var match = typeof input;
                  if (match === "string" || match === "boolean") {
                    return input;
                  }
                  if (match === "object") {
                    if (input === null) {
                      return input;
                    }
                    if (Array.isArray(input)) {
                      var output = [];
                      for(var idx = 0 ,idx_finish = input.length; idx < idx_finish; ++idx){
                        var inputItem = input[idx];
                        var $$location = idx.toString();
                        output.push(parse(inputItem, path$1 + ("[" + JSON.stringify($$location) + "]")));
                      }
                      return output;
                    }
                    var keys = Object.keys(input);
                    var output$1 = {};
                    for(var idx$1 = 0 ,idx_finish$1 = keys.length; idx$1 < idx_finish$1; ++idx$1){
                      var key = keys[idx$1];
                      var field = input[key];
                      output$1[key] = parse(field, path$1 + ("[" + JSON.stringify(key) + "]"));
                    }
                    return output$1;
                  }
                  if (match === "number") {
                    if (!Number.isNaN(input)) {
                      return input;
                    }
                    throw new RescriptSchemaError({
                              TAG: "InvalidType",
                              expected: selfSchema,
                              received: input
                            }, "Parsing", path$1);
                  }
                  throw new RescriptSchemaError({
                            TAG: "InvalidType",
                            expected: selfSchema,
                            received: input
                          }, "Parsing", path$1);
                };
                return map(b, "e[" + (b.e.push(parse) - 1) + "]", input);
              }) : noop,
          s: noop,
          f: undefined,
          i: 0,
          m: empty
        };
}

var Catch = {};

function $$catch(schema, getFallbackValue) {
  return {
          t: schema.t,
          n: schema.n,
          p: (function (b, input, selfSchema, path) {
              var inputVar = $$var(b, input);
              return withCatch(b, input, (function (b, errorVar) {
                            return val(b, "e[" + (b.e.push(function (input, internalError) {
                                              return getFallbackValue({
                                                          e: internalError,
                                                          i: input,
                                                          s: selfSchema,
                                                          f: (function (message, customPathOpt) {
                                                              var customPath = customPathOpt !== undefined ? customPathOpt : "";
                                                              throw new RescriptSchemaError({
                                                                        TAG: "OperationFailed",
                                                                        _0: message
                                                                      }, b.o, path + customPath);
                                                            })
                                                        });
                                            }) - 1) + "](" + inputVar + "," + errorVar + ")");
                          }), (function (b) {
                            return useWithTypeFilter(b, schema, input, path);
                          }));
            }),
          s: schema.s,
          f: undefined,
          i: 0,
          m: schema.m
        };
}

var deprecationMetadataId = "rescript-schema:deprecation";

function deprecate(schema, message) {
  return set$2(schema, deprecationMetadataId, message);
}

function deprecation(schema) {
  return schema.m[deprecationMetadataId];
}

var descriptionMetadataId = "rescript-schema:description";

function describe(schema, description) {
  return set$2(schema, descriptionMetadataId, description);
}

function description(schema) {
  return schema.m[descriptionMetadataId];
}

function definitionToSchema(definition, embededSet) {
  var kind = toKindWithSet(definition, embededSet);
  switch (kind) {
    case 0 :
        if (Array.isArray(definition)) {
          return factory$7(function (s) {
                      for(var idx = 0 ,idx_finish = definition.length; idx < idx_finish; ++idx){
                        var definition$1 = definition[idx];
                        definition[idx] = s.i(idx, definitionToSchema(definition$1, embededSet));
                      }
                      return definition;
                    });
        } else {
          return factory$3(function (s) {
                      var keys = Object.keys(definition);
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        definition[key] = s.f(key, definitionToSchema(definition$1, embededSet));
                      }
                      return definition;
                    });
        }
    case 1 :
        return literal(definition);
    case 2 :
        return definition;
    
  }
}

function factory$9(definer) {
  var embededSet = new Set();
  var matches = function (schema) {
    embededSet.add(schema);
    return schema;
  };
  var ctx = {
    matches: matches
  };
  var definition = definer(ctx);
  return definitionToSchema(definition, embededSet);
}

var $$class = RescriptSchemaError;

function make$2(prim0, prim1, prim2) {
  return new RescriptSchemaError(prim0, prim1, prim2);
}

function raise(error) {
  throw error;
}

function reason(error, nestedLevelOpt) {
  var nestedLevel = nestedLevelOpt !== undefined ? nestedLevelOpt : 0;
  var reason$1 = error.code;
  if (typeof reason$1 !== "object") {
    return "Encountered unexpected asynchronous transform or refine. Use S.parseAsyncWith instead of S.parseWith";
  }
  switch (reason$1.TAG) {
    case "OperationFailed" :
        return reason$1._0;
    case "InvalidOperation" :
        return reason$1.description;
    case "InvalidType" :
        return "Expected " + reason$1.expected.n() + ", received " + parseInternal(reason$1.received).s;
    case "InvalidLiteral" :
        return "Expected " + reason$1.expected.s + ", received " + parseInternal(reason$1.received).s;
    case "ExcessField" :
        return "Encountered disallowed excess key " + JSON.stringify(reason$1._0) + " on an object. Use Deprecated to ignore a specific field, or S.Object.strip to ignore excess keys completely";
    case "InvalidUnion" :
        var lineBreak = "\n" + " ".repeat((nestedLevel << 1));
        var array = reason$1._0.map(function (error) {
              var reason$2 = reason(error, nestedLevel + 1);
              var nonEmptyPath = error.path;
              var $$location = nonEmptyPath === "" ? "" : "Failed at " + nonEmptyPath + ". ";
              return "- " + $$location + reason$2;
            });
        var reasons = Array.from(new Set(array));
        return "Invalid union with following errors" + lineBreak + reasons.join(lineBreak);
    case "InvalidJsonStruct" :
        return "The schema " + reason$1._0.n() + " is not compatible with JSON";
    
  }
}

function message(error) {
  var match = error.operation;
  var operation;
  operation = match === "Parsing" ? "parsing" : "serializing";
  var nonEmptyPath = error.path;
  var pathText = nonEmptyPath === "" ? "root" : nonEmptyPath;
  return "Failed " + operation + " at " + pathText + ". Reason: " + reason(error);
}

function internalInline(schema, maybeVariant, param) {
  var metadataMap = Object.assign({}, schema.m);
  var literal = schema.t;
  var inlinedSchema;
  if (typeof literal !== "object") {
    switch (literal) {
      case "Never" :
          inlinedSchema = "S.never";
          break;
      case "Unknown" :
          inlinedSchema = "S.unknown";
          break;
      case "String" :
          inlinedSchema = "S.string";
          break;
      case "Int" :
          inlinedSchema = "S.int";
          break;
      case "Float" :
          inlinedSchema = "S.float";
          break;
      case "Bool" :
          inlinedSchema = "S.bool";
          break;
      
    }
  } else {
    switch (literal.TAG) {
      case "Literal" :
          inlinedSchema = "S.literal(%raw(\`" + literal._0.s + "\`))";
          break;
      case "Option" :
          inlinedSchema = "S.option(" + internalInline(literal._0, undefined, undefined) + ")";
          break;
      case "Null" :
          inlinedSchema = "S.null(" + internalInline(literal._0, undefined, undefined) + ")";
          break;
      case "Array" :
          inlinedSchema = "S.array(" + internalInline(literal._0, undefined, undefined) + ")";
          break;
      case "Object" :
          var fieldNames = literal.fieldNames;
          var fields = literal.fields;
          inlinedSchema = fieldNames.length !== 0 ? "S.object(s =>\n  {\n    " + fieldNames.map(function (fieldName) {
                    return JSON.stringify(fieldName) + ": s.field(" + JSON.stringify(fieldName) + ", " + internalInline(fields[fieldName], undefined, undefined) + ")";
                  }).join(",\n    ") + ",\n  }\n)" : "S.object(_ => ())";
          break;
      case "Tuple" :
          var tupleSchemas = literal._0;
          var exit = 0;
          var len = tupleSchemas.length;
          if (len >= 4) {
            exit = 1;
          } else {
            switch (len) {
              case 0 :
                  exit = 1;
                  break;
              case 1 :
                  var s1 = tupleSchemas[0];
                  inlinedSchema = "S.tuple1(" + internalInline(s1, undefined, undefined) + ")";
                  break;
              case 2 :
                  var s1$1 = tupleSchemas[0];
                  var s2 = tupleSchemas[1];
                  inlinedSchema = "S.tuple2(" + internalInline(s1$1, undefined, undefined) + ", " + internalInline(s2, undefined, undefined) + ")";
                  break;
              case 3 :
                  var s1$2 = tupleSchemas[0];
                  var s2$1 = tupleSchemas[1];
                  var s3 = tupleSchemas[2];
                  inlinedSchema = "S.tuple3(" + internalInline(s1$2, undefined, undefined) + ", " + internalInline(s2$1, undefined, undefined) + ", " + internalInline(s3, undefined, undefined) + ")";
                  break;
              
            }
          }
          if (exit === 1) {
            inlinedSchema = "S.tuple(s => (" + tupleSchemas.map(function (s, idx) {
                    return "s.item(" + idx + ", " + internalInline(s, undefined, undefined) + ")";
                  }).join(", ") + "))";
          }
          break;
      case "Union" :
          var variantNamesCounter = {};
          inlinedSchema = "S.union([" + literal._0.map(function (s) {
                  var variantName = s.n();
                  var n = Js_dict.get(variantNamesCounter, variantName);
                  var numberOfVariantNames = n !== undefined ? n : 0;
                  variantNamesCounter[variantName] = numberOfVariantNames + 1;
                  var variantName$1 = numberOfVariantNames !== 0 ? variantName + (numberOfVariantNames + 1) : variantName;
                  var inlinedVariant = "#" + JSON.stringify(variantName$1);
                  return internalInline(s, inlinedVariant, undefined);
                }).join(", ") + "])";
          break;
      case "Dict" :
          inlinedSchema = "S.dict(" + internalInline(literal._0, undefined, undefined) + ")";
          break;
      case "JSON" :
          inlinedSchema = "S.json(~validate=" + literal.validated + ")";
          break;
      
    }
  }
  var $$default = schema.m[defaultMetadataId];
  var inlinedSchema$1;
  if ($$default !== undefined) {
    Js_dict.unsafeDeleteKey(metadataMap, defaultMetadataId);
    if ($$default.TAG === "Value") {
      var defaultValue = $$default._0;
      inlinedSchema$1 = inlinedSchema + ("->S.Option.getOr(%raw(\`" + (
          defaultValue === (void 0) ? "undefined" : JSON.stringify(defaultValue)
        ) + "\`))");
    } else {
      var any = $$default._0();
      inlinedSchema$1 = inlinedSchema + ("->S.Option.getOrWith(() => %raw(\`" + (
          any === (void 0) ? "undefined" : JSON.stringify(any)
        ) + "\`))");
    }
  } else {
    inlinedSchema$1 = inlinedSchema;
  }
  var message = deprecation(schema);
  var inlinedSchema$2 = message !== undefined ? (Js_dict.unsafeDeleteKey(metadataMap, deprecationMetadataId), inlinedSchema$1 + ("->S.deprecate(" + JSON.stringify(message) + ")")) : inlinedSchema$1;
  var message$1 = description(schema);
  var inlinedSchema$3 = message$1 !== undefined ? (Js_dict.unsafeDeleteKey(metadataMap, descriptionMetadataId), inlinedSchema$2 + ("->S.describe(" + (
          message$1 === (void 0) ? "undefined" : JSON.stringify(message$1)
        ) + ")")) : inlinedSchema$2;
  var match = schema.t;
  var inlinedSchema$4;
  inlinedSchema$4 = typeof match !== "object" || !(match.TAG === "Object" && match.unknownKeys !== "Strip") ? inlinedSchema$3 : inlinedSchema$3 + "->S.Object.strict";
  var match$1 = schema.t;
  var inlinedSchema$5;
  var exit$1 = 0;
  if (typeof match$1 !== "object") {
    switch (match$1) {
      case "String" :
          exit$1 = 1;
          break;
      case "Int" :
          var refinements$4 = refinements$1(schema);
          if (refinements$4.length !== 0) {
            Js_dict.unsafeDeleteKey(metadataMap, metadataId$1);
            inlinedSchema$5 = inlinedSchema$4 + refinements$4.map(function (refinement) {
                    var match = refinement.kind;
                    if (typeof match !== "object") {
                      return "->S.port(~message=" + JSON.stringify(refinement.message) + ")";
                    } else if (match.TAG === "Min") {
                      return "->S.intMin(" + match.value + ", ~message=" + JSON.stringify(refinement.message) + ")";
                    } else {
                      return "->S.intMax(" + match.value + ", ~message=" + JSON.stringify(refinement.message) + ")";
                    }
                  }).join("");
          } else {
            inlinedSchema$5 = inlinedSchema$4;
          }
          break;
      case "Float" :
          var refinements$5 = refinements$2(schema);
          if (refinements$5.length !== 0) {
            Js_dict.unsafeDeleteKey(metadataMap, metadataId$2);
            inlinedSchema$5 = inlinedSchema$4 + refinements$5.map(function (refinement) {
                    var match = refinement.kind;
                    if (match.TAG === "Min") {
                      var value = match.value;
                      return "->S.floatMin(" + (value.toString() + (
                                value % 1 === 0 ? "." : ""
                              )) + ", ~message=" + JSON.stringify(refinement.message) + ")";
                    }
                    var value$1 = match.value;
                    return "->S.floatMax(" + (value$1.toString() + (
                              value$1 % 1 === 0 ? "." : ""
                            )) + ", ~message=" + JSON.stringify(refinement.message) + ")";
                  }).join("");
          } else {
            inlinedSchema$5 = inlinedSchema$4;
          }
          break;
      default:
        inlinedSchema$5 = inlinedSchema$4;
    }
  } else {
    switch (match$1.TAG) {
      case "Literal" :
          if (match$1._0.kind === "String") {
            exit$1 = 1;
          } else {
            inlinedSchema$5 = inlinedSchema$4;
          }
          break;
      case "Array" :
          var refinements$6 = refinements$3(schema);
          if (refinements$6.length !== 0) {
            Js_dict.unsafeDeleteKey(metadataMap, metadataId$3);
            inlinedSchema$5 = inlinedSchema$4 + refinements$6.map(function (refinement) {
                    var match = refinement.kind;
                    switch (match.TAG) {
                      case "Min" :
                          return "->S.arrayMin(" + match.length + ", ~message=" + JSON.stringify(refinement.message) + ")";
                      case "Max" :
                          return "->S.arrayMax(" + match.length + ", ~message=" + JSON.stringify(refinement.message) + ")";
                      case "Length" :
                          return "->S.arrayLength(" + match.length + ", ~message=" + JSON.stringify(refinement.message) + ")";
                      
                    }
                  }).join("");
          } else {
            inlinedSchema$5 = inlinedSchema$4;
          }
          break;
      default:
        inlinedSchema$5 = inlinedSchema$4;
    }
  }
  if (exit$1 === 1) {
    var refinements$7 = refinements(schema);
    if (refinements$7.length !== 0) {
      Js_dict.unsafeDeleteKey(metadataMap, metadataId);
      inlinedSchema$5 = inlinedSchema$4 + refinements$7.map(function (refinement) {
              var match = refinement.kind;
              if (typeof match !== "object") {
                switch (match) {
                  case "Email" :
                      return "->S.email(~message=" + JSON.stringify(refinement.message) + ")";
                  case "Uuid" :
                      return "->S.uuid(~message=" + JSON.stringify(refinement.message) + ")";
                  case "Cuid" :
                      return "->S.cuid(~message=" + JSON.stringify(refinement.message) + ")";
                  case "Url" :
                      return "->S.url(~message=" + JSON.stringify(refinement.message) + ")";
                  case "Datetime" :
                      return "->S.datetime(~message=" + JSON.stringify(refinement.message) + ")";
                  
                }
              } else {
                switch (match.TAG) {
                  case "Min" :
                      return "->S.stringMin(" + match.length + ", ~message=" + JSON.stringify(refinement.message) + ")";
                  case "Max" :
                      return "->S.stringMax(" + match.length + ", ~message=" + JSON.stringify(refinement.message) + ")";
                  case "Length" :
                      return "->S.stringLength(" + match.length + ", ~message=" + JSON.stringify(refinement.message) + ")";
                  case "Pattern" :
                      return "->S.pattern(%re(" + JSON.stringify(match.re.toString()) + "), ~message=" + JSON.stringify(refinement.message) + ")";
                  
                }
              }
            }).join("");
    } else {
      inlinedSchema$5 = inlinedSchema$4;
    }
  }
  var inlinedSchema$6 = Object.keys(metadataMap).length !== 0 ? "{\n  let s = " + inlinedSchema$5 + "\n  let _ = %raw(\`s.m = " + JSON.stringify(metadataMap) + "\`)\n  s\n}" : inlinedSchema$5;
  if (maybeVariant !== undefined) {
    return inlinedSchema$6 + ("->S.variant(v => " + maybeVariant + "(v))");
  } else {
    return inlinedSchema$6;
  }
}

function inline$1(schema) {
  if (false) {
    var v = (void 0);
    if (v !== undefined) {
      Caml_option.valFromOption(v);
    }
    
  }
  return internalInline(schema, undefined, undefined);
}

function tuple1(v0) {
  return factory$7(function (s) {
              return s.i(0, v0);
            });
}

function tuple2(v0, v1) {
  return factory$7(function (s) {
              return [
                      s.i(0, v0),
                      s.i(1, v1)
                    ];
            });
}

function tuple3(v0, v1, v2) {
  return factory$7(function (s) {
              return [
                      s.i(0, v0),
                      s.i(1, v1),
                      s.i(2, v2)
                    ];
            });
}

function intMin(schema, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + "<" + ("e[" + (b.e.push(minValue) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function intMax(schema, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ">" + ("e[" + (b.e.push(maxValue) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function port(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid port";
  return addRefinement(schema, metadataId$1, {
              kind: "Port",
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + "<1||" + $$var(b, input) + ">65535){" + fail(b, message, path) + "}";
              }));
}

function floatMin(schema, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  return addRefinement(schema, metadataId$2, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + "<" + ("e[" + (b.e.push(minValue) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function floatMax(schema, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  return addRefinement(schema, metadataId$2, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ">" + ("e[" + (b.e.push(maxValue) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function arrayMin(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or more items long";
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ".length<" + ("e[" + (b.e.push(length) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function arrayMax(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or fewer items long";
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ".length>" + ("e[" + (b.e.push(length) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function arrayLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be exactly " + length + " items long";
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Length",
                length: length
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ".length!==" + ("e[" + (b.e.push(length) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function stringMin(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or more characters long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ".length<" + ("e[" + (b.e.push(length) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function stringMax(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or fewer characters long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ".length>" + ("e[" + (b.e.push(length) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function stringLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be exactly " + length + " characters long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Length",
                length: length
              },
              message: message
            }, (function (b, input, param, path) {
                return "if(" + $$var(b, input) + ".length!==" + ("e[" + (b.e.push(length) - 1) + "]") + "){" + fail(b, message, path) + "}";
              }));
}

function email(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid email address";
  return addRefinement(schema, metadataId, {
              kind: "Email",
              message: message
            }, (function (b, input, param, path) {
                return "if(!" + ("e[" + (b.e.push(emailRegex) - 1) + "]") + ".test(" + $$var(b, input) + ")){" + fail(b, message, path) + "}";
              }));
}

function uuid(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid UUID";
  return addRefinement(schema, metadataId, {
              kind: "Uuid",
              message: message
            }, (function (b, input, param, path) {
                return "if(!" + ("e[" + (b.e.push(uuidRegex) - 1) + "]") + ".test(" + $$var(b, input) + ")){" + fail(b, message, path) + "}";
              }));
}

function cuid(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid CUID";
  return addRefinement(schema, metadataId, {
              kind: "Cuid",
              message: message
            }, (function (b, input, param, path) {
                return "if(!" + ("e[" + (b.e.push(cuidRegex) - 1) + "]") + ".test(" + $$var(b, input) + ")){" + fail(b, message, path) + "}";
              }));
}

function url(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid url";
  return addRefinement(schema, metadataId, {
              kind: "Url",
              message: message
            }, (function (b, input, param, path) {
                return "try{new URL(" + $$var(b, input) + ")}catch(_){" + fail(b, message, path) + "}";
              }));
}

function pattern(schema, re, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Pattern",
                re: re
              },
              message: message
            }, (function (b, input, param, path) {
                var reVal = val(b, "e[" + (b.e.push(re) - 1) + "]");
                var reVar = $$var(b, reVal);
                return reVar + ".lastIndex=0;if(!" + reVar + ".test(" + $$var(b, input) + ")){" + fail(b, message, path) + "}";
              }));
}

function datetime(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid datetime string! Must be UTC";
  var refinement = {
    kind: "Datetime",
    message: message
  };
  var refinements = schema.m[metadataId];
  return transform$1(set$2(schema, metadataId, refinements !== undefined ? refinements.concat(refinement) : [refinement]), (function (s) {
                return {
                        p: (function (string) {
                            if (!datetimeRe.test(string)) {
                              s.fail(message, undefined);
                            }
                            return new Date(string);
                          }),
                        s: (function (date) {
                            return date.toISOString();
                          })
                      };
              }));
}

function trim(schema) {
  var transformer = function (string) {
    return string.trim();
  };
  return transform$1(schema, (function (param) {
                return {
                        p: transformer,
                        s: transformer
                      };
              }));
}

function toJsResult(result) {
  if (result.TAG === "Ok") {
    return {
            success: true,
            value: result._0
          };
  } else {
    return {
            success: false,
            error: result._0
          };
  }
}

function js_parse(schema, data) {
  try {
    return {
            success: true,
            value: parseAnyOrRaiseWith(data, schema)
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            success: false,
            error: getOrRethrow(exn)
          };
  }
}

function js_parseOrThrow(schema, data) {
  return parseAnyOrRaiseWith(data, schema);
}

function js_parseAsync(schema, data) {
  return parseAnyAsyncWith(data, schema).then(toJsResult);
}

function js_serialize(schema, value) {
  try {
    return {
            success: true,
            value: serializeToUnknownOrRaiseWith(value, schema)
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            success: false,
            error: getOrRethrow(exn)
          };
  }
}

function js_serializeOrThrow(schema, value) {
  return serializeToUnknownOrRaiseWith(value, schema);
}

function js_transform(schema, maybeParser, maybeSerializer) {
  return transform$1(schema, (function (s) {
                return {
                        p: maybeParser !== undefined ? (function (v) {
                              return maybeParser(v, s);
                            }) : undefined,
                        s: maybeSerializer !== undefined ? (function (v) {
                              return maybeSerializer(v, s);
                            }) : undefined
                      };
              }));
}

function js_refine(schema, refiner) {
  return refine(schema, (function (s) {
                return function (v) {
                  refiner(v, s);
                };
              }));
}

function noop$1(a) {
  return a;
}

function js_asyncParserRefine(schema, refine) {
  return transform$1(schema, (function (s) {
                return {
                        a: (function (v) {
                            return function () {
                              return refine(v, s).then(function () {
                                          return v;
                                        });
                            };
                          }),
                        s: noop$1
                      };
              }));
}

function js_optional(schema, maybeOr) {
  var schema$1 = factory$1(schema);
  if (maybeOr === undefined) {
    return schema$1;
  }
  var or = Caml_option.valFromOption(maybeOr);
  if (typeof or === "function") {
    return getOrWith(schema$1, or);
  } else {
    return getOr(schema$1, or);
  }
}

function js_tuple(definer) {
  if (typeof definer === "function") {
    return factory$7(definer);
  } else {
    return factory$7(function (s) {
                return definer.map(function (schema, idx) {
                            return s.i(idx, schema);
                          });
              });
  }
}

function js_custom(name, maybeParser, maybeSerializer, param) {
  return custom(name, (function (s) {
                return {
                        p: maybeParser !== undefined ? (function (v) {
                              return maybeParser(v, s);
                            }) : undefined,
                        s: maybeSerializer !== undefined ? (function (v) {
                              return maybeSerializer(v, s);
                            }) : undefined
                      };
              }));
}

function js_object(definer) {
  if (typeof definer === "function") {
    return factory$3(definer);
  } else {
    return factory$3(function (s) {
                var definition = {};
                var fieldNames = Object.keys(definer);
                for(var idx = 0 ,idx_finish = fieldNames.length; idx < idx_finish; ++idx){
                  var fieldName = fieldNames[idx];
                  var schema = definer[fieldName];
                  definition[fieldName] = s.f(fieldName, schema);
                }
                return definition;
              });
  }
}

function js_merge(s1, s2) {
  var match = s1.t;
  if (typeof match === "object" && match.TAG === "Object") {
    var s1FieldNames = match.fieldNames;
    var s1Fields = match.fields;
    var match$1 = s2.t;
    if (typeof match$1 === "object" && match$1.TAG === "Object") {
      var s2FieldNames = match$1.fieldNames;
      var s2Fields = match$1.fields;
      var fieldNames = [];
      var fields = {};
      for(var idx = 0 ,idx_finish = s1FieldNames.length; idx < idx_finish; ++idx){
        var fieldName = s1FieldNames[idx];
        fieldNames.push(fieldName);
        fields[fieldName] = s1Fields[fieldName];
      }
      for(var idx$1 = 0 ,idx_finish$1 = s2FieldNames.length; idx$1 < idx_finish$1; ++idx$1){
        var fieldName$1 = s2FieldNames[idx$1];
        if (fields[fieldName$1]) {
          var message = "The field " + JSON.stringify(fieldName$1) + " is defined multiple times.";
          throw new Error("[rescript-schema] " + message);
        }
        fieldNames.push(fieldName$1);
        fields[fieldName$1] = s2Fields[fieldName$1];
      }
      return {
              t: {
                TAG: "Object",
                fields: fields,
                fieldNames: fieldNames,
                unknownKeys: match$1.unknownKeys
              },
              n: (function () {
                  return s1.n() + " & " + s2.n();
                }),
              p: (function (b, input, param, path) {
                  var s1Result = use(b, s1, input, path);
                  var s2Result = use(b, s2, input, path);
                  return val(b, "Object.assign(" + inline(b, s1Result) + ", " + inline(b, s2Result) + ")");
                }),
              s: (function (b, param, param$1, path) {
                  return invalidOperation(b, path, "The S.merge serializing is not supported yet");
                }),
              f: typeFilter,
              i: 0,
              m: empty
            };
    }
    
  }
  throw new Error("[rescript-schema] The merge supports only Object schemas.");
}

function js_name(prim) {
  return prim.n();
}

var Path = {
  empty: "",
  dynamic: "[]",
  toArray: toArray,
  fromArray: fromArray,
  fromLocation: fromLocation,
  concat: concat
};

var $$Error$1 = {
  $$class: $$class,
  make: make$2,
  raise: raise,
  message: message,
  reason: reason
};

var Literal = {
  parse: parse,
  value: value,
  isJsonable: isJsonable,
  toString: toString
};

var never = schema;

var unknown = schema$1;

var string = schema$2;

var bool = schema$3;

var $$int = schema$4;

var $$float = schema$5;

var array = factory$5;

var dict = factory$6;

var option = factory$1;

var $$null$1 = factory$2;

var jsonString = factory$4;

var union = factory$8;

var variant = factory;

var parseWith = parseAnyWith;

var parseOrRaiseWith = parseAnyOrRaiseWith;

var parseAsyncWith = parseAnyAsyncWith;

var parseAsyncInStepsWith = parseAnyAsyncInStepsWith;

var Schema = {};

var schema$6 = factory$9;

var $$Object = {
  factory: factory$3,
  strip: strip,
  strict: strict
};

var object = factory$3;

var Tuple = {};

var tuple = factory$7;

var $$Option = {
  $$default: $$default,
  getOr: getOr,
  getOrWith: getOrWith
};

var String_Refinement = {};

var $$String = {
  Refinement: String_Refinement,
  refinements: refinements
};

var Int_Refinement = {};

var Int = {
  Refinement: Int_Refinement,
  refinements: refinements$1
};

var Float_Refinement = {};

var Float = {
  Refinement: Float_Refinement,
  refinements: refinements$2
};

var Array_Refinement = {};

var $$Array = {
  Refinement: Array_Refinement,
  refinements: refinements$3
};

var Metadata = {
  Id: Id,
  get: get,
  set: set$2
};

export {
  Path ,
  Raised ,
  $$Error$1 as $$Error,
  Literal ,
  never ,
  unknown ,
  unit ,
  string ,
  bool ,
  $$int ,
  $$float ,
  json ,
  literal ,
  array ,
  list ,
  dict ,
  option ,
  $$null$1 as $$null,
  nullable ,
  jsonString ,
  union ,
  Catch ,
  $$catch ,
  describe ,
  description ,
  deprecate ,
  deprecation ,
  transform$1 as transform,
  preprocess ,
  custom ,
  refine ,
  variant ,
  parseWith ,
  parseAnyWith ,
  parseJsonStringWith ,
  parseOrRaiseWith ,
  parseAnyOrRaiseWith ,
  parseAsyncWith ,
  parseAnyAsyncWith ,
  parseAsyncInStepsWith ,
  parseAnyAsyncInStepsWith ,
  serializeWith ,
  serializeToUnknownWith ,
  serializeToJsonStringWith ,
  serializeOrRaiseWith ,
  serializeToUnknownOrRaiseWith ,
  serializeToJsonStringOrRaiseWith ,
  isAsyncParse ,
  recursive ,
  classify ,
  setName ,
  Schema ,
  schema$6 as schema,
  $$Object ,
  object ,
  Tuple ,
  tuple ,
  tuple1 ,
  tuple2 ,
  tuple3 ,
  $$Option ,
  $$String ,
  Int ,
  Float ,
  $$Array ,
  Metadata ,
  inline$1 as inline,
  intMin ,
  intMax ,
  port ,
  floatMin ,
  floatMax ,
  arrayMin ,
  arrayMax ,
  arrayLength ,
  stringMin ,
  stringMax ,
  stringLength ,
  email ,
  uuid ,
  cuid ,
  url ,
  pattern ,
  datetime ,
  trim ,
  js_optional ,
  js_tuple ,
  js_custom ,
  js_asyncParserRefine ,
  js_refine ,
  js_transform ,
  js_object ,
  js_merge ,
  js_parse ,
  js_parseOrThrow ,
  js_parseAsync ,
  js_serialize ,
  js_serializeOrThrow ,
  js_name ,
}
/* symbol Not a pure module */
