// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as TestUtils from "./TestUtils.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

var polyStruct = S$RescriptStruct.union([
      S$RescriptStruct.literalVariant({
            TAG: "String",
            _0: "one"
          }, "one"),
      S$RescriptStruct.literalVariant({
            TAG: "String",
            _0: "two"
          }, "two")
    ]);

Ava("Polymorphic variant", (function (t) {
        TestUtils.assertEqualStructs(t, polyStruct, S$RescriptStruct.union([
                  S$RescriptStruct.literalVariant({
                        TAG: "String",
                        _0: "one"
                      }, "one"),
                  S$RescriptStruct.literalVariant({
                        TAG: "String",
                        _0: "two"
                      }, "two")
                ]), undefined, undefined);
      }));

var polyWithSingleItemStruct = S$RescriptStruct.literalVariant({
      TAG: "String",
      _0: "single"
    }, "single");

Ava("Polymorphic variant with single item becomes a literal struct of the item", (function (t) {
        TestUtils.assertEqualStructs(t, polyWithSingleItemStruct, S$RescriptStruct.literalVariant({
                  TAG: "String",
                  _0: "single"
                }, "single"), undefined, undefined);
      }));

var polyWithAliasStruct = S$RescriptStruct.union([
      S$RescriptStruct.literalVariant({
            TAG: "String",
            _0: "하나"
          }, "one"),
      S$RescriptStruct.literalVariant({
            TAG: "String",
            _0: "two"
          }, "two")
    ]);

Ava("Polymorphic variant with partial @as usage", (function (t) {
        TestUtils.assertEqualStructs(t, polyWithAliasStruct, S$RescriptStruct.union([
                  S$RescriptStruct.literalVariant({
                        TAG: "String",
                        _0: "하나"
                      }, "one"),
                  S$RescriptStruct.literalVariant({
                        TAG: "String",
                        _0: "two"
                      }, "two")
                ]), undefined, undefined);
      }));

export {
  polyStruct ,
  polyWithSingleItemStruct ,
  polyWithAliasStruct ,
}
/* polyStruct Not a pure module */
