// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as TestUtils from "./TestUtils.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

var simpleRecordStruct = S$RescriptStruct.$$Object.factory(function (o) {
      return {
              label: S$RescriptStruct.field(o, "label", S$RescriptStruct.string(undefined)),
              value: S$RescriptStruct.field(o, "value", S$RescriptStruct.$$int(undefined))
            };
    });

Ava("Simple record struct", (function (t) {
        TestUtils.assertEqualStructs(t, simpleRecordStruct, S$RescriptStruct.object(function (o) {
                  return {
                          label: S$RescriptStruct.field(o, "label", S$RescriptStruct.string(undefined)),
                          value: S$RescriptStruct.field(o, "value", S$RescriptStruct.$$int(undefined))
                        };
                }), undefined, undefined);
        t.deepEqual(S$RescriptStruct.parseWith({label:"foo",value:1}, simpleRecordStruct), {
              TAG: "Ok",
              _0: {
                label: "foo",
                value: 1
              }
            }, undefined);
      }));

var recordWithAliasStruct = S$RescriptStruct.$$Object.factory(function (o) {
      return {
              label: S$RescriptStruct.field(o, "aliased-label", S$RescriptStruct.string(undefined)),
              value: S$RescriptStruct.field(o, "value", S$RescriptStruct.$$int(undefined))
            };
    });

Ava("Record struct with alias for field name", (function (t) {
        TestUtils.assertEqualStructs(t, recordWithAliasStruct, S$RescriptStruct.object(function (o) {
                  return {
                          label: S$RescriptStruct.field(o, "aliased-label", S$RescriptStruct.string(undefined)),
                          value: S$RescriptStruct.field(o, "value", S$RescriptStruct.$$int(undefined))
                        };
                }), undefined, undefined);
        t.deepEqual(S$RescriptStruct.parseWith({"aliased-label":"foo",value:1}, recordWithAliasStruct), {
              TAG: "Ok",
              _0: {
                label: "foo",
                value: 1
              }
            }, undefined);
      }));

var recordWithOptionalStruct = S$RescriptStruct.$$Object.factory(function (o) {
      return {
              label: S$RescriptStruct.field(o, "label", S$RescriptStruct.option(S$RescriptStruct.string(undefined))),
              value: S$RescriptStruct.field(o, "value", S$RescriptStruct.option(S$RescriptStruct.$$int(undefined)))
            };
    });

Ava("Record struct with optional fields", (function (t) {
        TestUtils.assertEqualStructs(t, recordWithOptionalStruct, S$RescriptStruct.object(function (o) {
                  return {
                          label: S$RescriptStruct.field(o, "label", S$RescriptStruct.option(S$RescriptStruct.string(undefined))),
                          value: S$RescriptStruct.field(o, "value", S$RescriptStruct.option(S$RescriptStruct.$$int(undefined)))
                        };
                }), undefined, undefined);
        t.deepEqual(S$RescriptStruct.parseWith({"label":"foo",value:1}, recordWithOptionalStruct), {
              TAG: "Ok",
              _0: {
                label: "foo",
                value: 1
              }
            }, undefined);
        t.deepEqual(S$RescriptStruct.parseWith({}, recordWithOptionalStruct), {
              TAG: "Ok",
              _0: {
                label: undefined,
                value: undefined
              }
            }, undefined);
      }));

export {
  simpleRecordStruct ,
  recordWithAliasStruct ,
  recordWithOptionalStruct ,
}
/* simpleRecordStruct Not a pure module */
