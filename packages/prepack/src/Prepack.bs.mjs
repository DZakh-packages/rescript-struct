// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Execa from "execa";
import * as Rollup from "rollup";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.mjs";
import * as Core__List from "@rescript/core/src/Core__List.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import PluginReplace from "@rollup/plugin-replace";

var projectPath = ".";

var artifactsPath = Path.join(projectPath, "packages/artifacts");

var sourePaths = [
  "package.json",
  "node_modules",
  "src",
  "bsconfig.json",
  "README.md",
  "RescriptStruct.gen.ts",
  "__tests__",
  "benchmark"
];

var jsInputPath = Path.join(artifactsPath, "src/S_JsApi.js");

function update(json, path, value) {
  var dict = Core__JSON.Decode.object(json);
  var dict$1 = dict !== undefined ? Object.assign({}, Caml_option.valFromOption(dict)) : ({});
  if (!path) {
    return value;
  }
  var path$1 = path.tl;
  var key = path.hd;
  if (path$1) {
    dict$1[key] = update(Core__Option.getWithDefault(dict$1[key], {}), path$1, value);
    return dict$1;
  } else {
    dict$1[key] = value;
    return dict$1;
  }
}

if (Fs.existsSync(artifactsPath)) {
  Fs.rmSync(artifactsPath, {
        recursive: true,
        force: true
      });
}

Fs.mkdirSync(artifactsPath);

sourePaths.forEach(function (path) {
      Fs.cpSync(Path.join(projectPath, path), Path.join(artifactsPath, path), {
            recursive: true
          });
    });

function updateJsonFile(src, path, value) {
  var packageJsonData = Fs.readFileSync(src, {
        encoding: "utf8"
      });
  var packageJson = JSON.parse(packageJsonData.toString());
  var updatedPackageJson = JSON.stringify(update(packageJson, Core__List.fromArray(path), value), null, 2);
  Fs.writeFileSync(src, Buffer.from(updatedPackageJson), {
        encoding: "utf8"
      });
}

Execa.execaSync("npm", [
      "run",
      "res:build"
    ], {
      cwd: artifactsPath
    });

var bundle = await Rollup.rollup({
      input: jsInputPath,
      external: [/S\.bs\.mjs/]
    });

var output = [
  {
    file: Path.join(artifactsPath, "dist/S.js"),
    format: "cjs",
    exports: "named",
    plugins: [PluginReplace({
            values: Object.fromEntries([
                  [
                    "S.bs.mjs",
                    "S.bs.js"
                  ],
                  [
                    "rescript/lib/es6",
                    "rescript/lib/js"
                  ]
                ])
          })]
  },
  {
    file: Path.join(artifactsPath, "dist/S.mjs"),
    format: "es",
    exports: "named"
  }
];

for(var idx = 0 ,idx_finish = output.length; idx < idx_finish; ++idx){
  var outpuOptions = output[idx];
  await bundle.write(outpuOptions);
}

await bundle.close();

Fs.rmSync(Path.join(artifactsPath, "lib"), {
      recursive: true,
      force: true
    });

updateJsonFile(Path.join(artifactsPath, "bsconfig.json"), [
      "package-specs",
      "module"
    ], "commonjs");

updateJsonFile(Path.join(artifactsPath, "bsconfig.json"), ["suffix"], ".bs.js");

Execa.execaSync("npm", [
      "run",
      "res:build"
    ], {
      cwd: artifactsPath
    });

updateJsonFile(Path.join(artifactsPath, "package.json"), ["type"], "commonjs");

export {
  
}
/* artifactsPath Not a pure module */
