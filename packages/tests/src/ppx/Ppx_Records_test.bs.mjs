// Generated by ReScript, PLEASE EDIT WITH CARE

import * as U from "../utils/U.bs.mjs";
import Ava from "ava";
import * as S$RescriptSchema from "rescript-schema/src/S.bs.mjs";

var simpleRecordSchema = S$RescriptSchema.$$Object.factory(function (s) {
      return {
              label: s.f("label", S$RescriptSchema.string),
              value: s.f("value", S$RescriptSchema.$$int)
            };
    });

Ava("Simple record schema", (function (t) {
        U.assertEqualSchemas(t, simpleRecordSchema, S$RescriptSchema.object(function (s) {
                  return {
                          label: s.f("label", S$RescriptSchema.string),
                          value: s.f("value", S$RescriptSchema.$$int)
                        };
                }), undefined);
        t.deepEqual(S$RescriptSchema.parseWith({label:"foo",value:1}, simpleRecordSchema), {
              TAG: "Ok",
              _0: {
                label: "foo",
                value: 1
              }
            }, undefined);
      }));

var recordWithAliasSchema = S$RescriptSchema.$$Object.factory(function (s) {
      return {
              "aliased-label": s.f("aliased-label", S$RescriptSchema.string),
              value: s.f("value", S$RescriptSchema.$$int)
            };
    });

Ava("Record schema with alias for field name", (function (t) {
        U.assertEqualSchemas(t, recordWithAliasSchema, S$RescriptSchema.object(function (s) {
                  return {
                          "aliased-label": s.f("aliased-label", S$RescriptSchema.string),
                          value: s.f("value", S$RescriptSchema.$$int)
                        };
                }), undefined);
        t.deepEqual(S$RescriptSchema.parseWith({"aliased-label":"foo",value:1}, recordWithAliasSchema), {
              TAG: "Ok",
              _0: {
                "aliased-label": "foo",
                value: 1
              }
            }, undefined);
      }));

var recordWithOptionalSchema = S$RescriptSchema.$$Object.factory(function (s) {
      return {
              label: s.f("label", S$RescriptSchema.option(S$RescriptSchema.string)),
              value: s.f("value", S$RescriptSchema.option(S$RescriptSchema.$$int))
            };
    });

Ava("Record schema with optional fields", (function (t) {
        U.assertEqualSchemas(t, recordWithOptionalSchema, S$RescriptSchema.object(function (s) {
                  return {
                          label: s.f("label", S$RescriptSchema.option(S$RescriptSchema.string)),
                          value: s.f("value", S$RescriptSchema.option(S$RescriptSchema.$$int))
                        };
                }), undefined);
        t.deepEqual(S$RescriptSchema.parseWith({"label":"foo",value:1}, recordWithOptionalSchema), {
              TAG: "Ok",
              _0: {
                label: "foo",
                value: 1
              }
            }, undefined);
        t.deepEqual(S$RescriptSchema.parseWith({}, recordWithOptionalSchema), {
              TAG: "Ok",
              _0: {
                label: undefined,
                value: undefined
              }
            }, undefined);
      }));

export {
  simpleRecordSchema ,
  recordWithAliasSchema ,
  recordWithOptionalSchema ,
}
/* simpleRecordSchema Not a pure module */
