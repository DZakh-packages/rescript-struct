// Generated by ReScript, PLEASE EDIT WITH CARE

import * as U from "../utils/U.bs.mjs";
import Ava from "ava";
import * as S$RescriptSchema from "rescript-schema/src/S.bs.mjs";

var simpleObjectSchema = S$RescriptSchema.schema(function (s) {
      return {
              label: s.matches(S$RescriptSchema.string),
              value: s.matches(S$RescriptSchema.$$int)
            };
    });

Ava("Simple object schema", (function (t) {
        U.assertEqualSchemas(t, simpleObjectSchema, S$RescriptSchema.object(function (s) {
                  return {
                          label: s.f("label", S$RescriptSchema.string),
                          value: s.f("value", S$RescriptSchema.$$int)
                        };
                }), undefined);
        t.deepEqual(S$RescriptSchema.parseOrThrow({label:"foo",value:1}, simpleObjectSchema), {
              label: "foo",
              value: 1
            }, undefined);
      }));

var objectWithAliasSchema = S$RescriptSchema.schema(function (s) {
      return {
              label: s.matches(S$RescriptSchema.string),
              value: s.matches(S$RescriptSchema.$$int)
            };
    });

Ava("The @as attribute for the object schema is ignored since it doesn't work", (function (t) {
        U.assertEqualSchemas(t, objectWithAliasSchema, S$RescriptSchema.object(function (s) {
                  return {
                          label: s.f("label", S$RescriptSchema.string),
                          value: s.f("value", S$RescriptSchema.$$int)
                        };
                }), undefined);
        t.deepEqual(S$RescriptSchema.parseOrThrow({"label":"foo",value:1}, objectWithAliasSchema), {
              label: "foo",
              value: 1
            }, undefined);
      }));

export {
  simpleObjectSchema ,
  objectWithAliasSchema ,
}
/* simpleObjectSchema Not a pure module */
