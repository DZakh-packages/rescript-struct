// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../../../../src/S.bs.mjs";
import Ava from "ava";
import * as TestUtils from "../utils/TestUtils.bs.mjs";

Ava("String struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.string, S.string, undefined, undefined);
      }));

Ava("Int struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.$$int, S.$$int, undefined, undefined);
      }));

Ava("Float struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.$$float, S.$$float, undefined, undefined);
      }));

Ava("Bool struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.bool, S.bool, undefined, undefined);
      }));

Ava("Unit struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.unit, S.unit, undefined, undefined);
      }));

Ava("Unknown struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.unknown, S.unknown, undefined, undefined);
      }));

Ava("Never struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.never, S.never, undefined, undefined);
      }));

var myOptionOfStringStruct = S.option(S.string);

Ava("Option of string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myOptionOfStringStruct, S.option(S.string), undefined, undefined);
      }));

var myArrayOfStringStruct = S.array(S.string);

Ava("Array of string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myArrayOfStringStruct, S.array(S.string), undefined, undefined);
      }));

var myListOfStringStruct = S.list(S.string);

Ava("List of string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myListOfStringStruct, S.list(S.string), undefined, undefined);
      }));

var myDictOfStringStruct = S.dict(S.string);

Ava("Dict of string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myDictOfStringStruct, S.dict(S.string), undefined, undefined);
      }));

var myDictOfStringFromCoreStruct = S.dict(S.string);

Ava("Dict of string struct from Core", (function (t) {
        TestUtils.assertEqualStructs(t, myDictOfStringFromCoreStruct, S.dict(S.string), undefined, undefined);
      }));

Ava("Json struct", (function (t) {
        TestUtils.assertEqualStructs(t, S.json, S.json, undefined, undefined);
      }));

Ava("Json struct from Core", (function (t) {
        TestUtils.assertEqualStructs(t, S.json, S.json, undefined, undefined);
      }));

var myTupleStruct = S.tuple(function (s) {
      return [
              s.i(0, S.string),
              s.i(1, S.$$int)
            ];
    });

Ava("Tuple struct", (function (t) {
        TestUtils.assertEqualStructs(t, myTupleStruct, S.tuple2(S.string, S.$$int), undefined, undefined);
      }));

var myBigTupleStruct = S.tuple(function (s) {
      return [
              s.i(0, S.string),
              s.i(1, S.string),
              s.i(2, S.string),
              s.i(3, S.$$int),
              s.i(4, S.$$int),
              s.i(5, S.$$int),
              s.i(6, S.$$float),
              s.i(7, S.$$float),
              s.i(8, S.$$float),
              s.i(9, S.bool),
              s.i(10, S.bool),
              s.i(11, S.bool)
            ];
    });

Ava("Big tuple struct", (function (t) {
        TestUtils.assertEqualStructs(t, myBigTupleStruct, S.tuple(function (s) {
                  return [
                          s.i(0, S.string),
                          s.i(1, S.string),
                          s.i(2, S.string),
                          s.i(3, S.$$int),
                          s.i(4, S.$$int),
                          s.i(5, S.$$int),
                          s.i(6, S.$$float),
                          s.i(7, S.$$float),
                          s.i(8, S.$$float),
                          s.i(9, S.bool),
                          s.i(10, S.bool),
                          s.i(11, S.bool)
                        ];
                }), undefined, undefined);
      }));

var myCustomStringStruct = S.$$String.email(S.string, undefined, undefined);

Ava("Custom string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myCustomStringStruct, S.$$String.email(S.string, undefined, undefined), undefined, undefined);
      }));

var myCustomLiteralStringStruct = S.$$String.email(S.literal("123"), undefined, undefined);

Ava("Custom litaral string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myCustomLiteralStringStruct, S.$$String.email(S.literal("123"), undefined, undefined), undefined, undefined);
      }));

var myCustomOptionalStringStruct = S.option(S.$$String.email(S.string, undefined, undefined));

Ava("Custom optional string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myCustomOptionalStringStruct, S.option(S.$$String.email(S.string, undefined, undefined)), undefined, undefined);
      }));

var myNullOfStringStruct = S.$$null(S.string);

Ava("Null of string struct", (function (t) {
        TestUtils.assertEqualStructs(t, myNullOfStringStruct, S.$$null(S.string), undefined, undefined);
      }));

var myStringStruct = S.string;

var myIntStruct = S.$$int;

var myFloatStruct = S.$$float;

var myBoolStruct = S.bool;

var myUnitStruct = S.unit;

var myUnknownStruct = S.unknown;

var myNeverStruct = S.never;

var myJsonStruct = S.json;

var myJsonFromCoreStruct = S.json;

export {
  myStringStruct ,
  myIntStruct ,
  myFloatStruct ,
  myBoolStruct ,
  myUnitStruct ,
  myUnknownStruct ,
  myNeverStruct ,
  myOptionOfStringStruct ,
  myArrayOfStringStruct ,
  myListOfStringStruct ,
  myDictOfStringStruct ,
  myDictOfStringFromCoreStruct ,
  myJsonStruct ,
  myJsonFromCoreStruct ,
  myTupleStruct ,
  myBigTupleStruct ,
  myCustomStringStruct ,
  myCustomLiteralStringStruct ,
  myCustomOptionalStringStruct ,
  myNullOfStringStruct ,
}
/*  Not a pure module */
